syntax = "proto3";
package celestia.signal.v1;

import "google/api/annotations.proto";
import "celestia/signal/v1/upgrade.proto";

option go_package = "github.com/celestiaorg/celestia-app/x/signal/types";

// Query defines the signal Query service.
service Query {
  // VersionTally enables a client to query for the tally of voting power that
  // has signalled for a particular version.
  rpc VersionTally(QueryVersionTallyRequest) returns (QueryVersionTallyResponse) {
    option (google.api.http).get = "/signal/v1/tally/{version}";
  }

  // GetUpgrade enables a client to query for upgrade information if an upgrade
  // is pending. The response will be empty if no upgrade is pending.
  rpc GetUpgrade(QueryGetUpgradeRequest) returns (QueryGetUpgradeResponse) {
    option (google.api.http).get = "/signal/v1/upgrade";
  }
}

// QueryVersionTallyRequest is the request type for the VersionTally query.
message QueryVersionTallyRequest {
  uint64 version = 1;
}

// QueryVersionTallyResponse is the response type for the VersionTally query.
message QueryVersionTallyResponse {
  uint64 voting_power       = 1;
  uint64 threshold_power    = 2;
  uint64 total_voting_power = 3;
}

// QueryGetUpgradeRequest is the request type for the GetUpgrade query.
message QueryGetUpgradeRequest {}

// QueryGetUpgradeResponse is the response type for the GetUpgrade query.
message QueryGetUpgradeResponse {
  Upgrade upgrade = 1;
}
