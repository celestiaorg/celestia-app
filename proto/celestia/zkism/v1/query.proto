syntax = "proto3";

package celestia.zkism.v1;

import "celestia/zkism/v1/types.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "google/api/annotations.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/celestiaorg/celestia-app/x/zkism/types";

// Query defines the zkism module Query service.
service Query {
  // Ism defines an rpc method for querying an ISM by ID.
  rpc Ism(QueryIsmRequest) returns (QueryIsmResponse) {
    option (google.api.http).get = "/celestia/zkism/v1/isms/{id}";
  }

  // Isms defines an rpc method for querying all ISMs.
  rpc Isms(QueryIsmsRequest) returns (QueryIsmsResponse) {
    option (google.api.http).get = "/celestia/zkism/v1/isms";
  }
}

// QueryIsmRequest is the request type for the Ism rpc method.
message QueryIsmRequest {
  string id = 1;
}

// QueryIsmResponse is the response type for the Ism rpc method.
message QueryIsmResponse {
  ZKExecutionISM ism = 1 [(gogoproto.nullable) = false];
}

// QueryIsmsRequest is the request type for the Isms rpc method.
message QueryIsmsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryIsmsResponse is the response type for the Isms rpc method.
message QueryIsmsResponse {
  // isms is a list of zk execution isms.
  repeated ZKExecutionISM isms = 1 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
