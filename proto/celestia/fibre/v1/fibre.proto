syntax = "proto3";
package celestia.fibre.v1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "google/protobuf/timestamp.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/celestiaorg/celestia-app/x/fibre/types";

// EscrowAccount helps guarantee payment for a signed PaymentPromise by ensuring
// that a user does not remove funds directly after validators sign over and
// provide service for a blob.
message EscrowAccount {
  // signer is the address that controls this escrow account
  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // balance is the total amount currently held in escrow
  cosmos.base.v1beta1.Coin balance = 2 [(gogoproto.nullable) = false];
  // available_balance is the amount available for new payments. This is usually
  // the same as balance except if a user has requested a withdrawal in the past
  // 24 hours in which case available_balance = balance - pending withdrawal
  // amount.
  cosmos.base.v1beta1.Coin available_balance = 3 [(gogoproto.nullable) = false];
}

// PaymentPromise is a promise to pay for a fibre blob. It contains the
// commitment and payment details for the fibre blob.
message PaymentPromise {
  // signer is the owner of the escrow account to charge
  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // namespace is the namespace the blob is associated with.
  bytes namespace = 2;
  // blob_size is the size of the blob in bytes
  uint32 blob_size = 3;
  // commitment is the hash of the row root and the Random Linear Combination (RLC) root
  bytes commitment = 4;
  // row_version is the version of the row format
  uint32 row_version = 5;
  // creation_timestamp is the timestamp when this promise was created. This
  // is critical for determining which validators sign the commitment and
  // determining when service stops for this blob.
  google.protobuf.Timestamp creation_timestamp = 6 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  // signature is the signer (escrow account owner) signature over the sign bytes
  bytes signature = 7;
  // height is the height that is used to determine the validator set that is used
  int64 height = 8;
  // chain_id is the chain ID that this payment promise is valid for.
  // Example: arabica-11, mocha-4, or celestia.
  string chain_id = 9;
}

// Withdrawal tracks requests to withdraw funds from an escrow account. It is
// needed to implement a delay mechanism between when a withdrawal is requested
// and when it is executed. By default the withdrawal delay is 24 hours.
message Withdrawal {
  // signer is the address that owns the escrow account this withdrawal is for
  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // amount is the amount to be withdrawn
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false];
  // requested_height is the block height when the withdrawal was requested
  int64 requested_height = 3;
  // executed_height is the block height when the withdrawal was executed
  int64 executed_height = 4;
  // requested_timestamp is the timestamp when withdrawal was requested
  google.protobuf.Timestamp requested_timetstamp = 5 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  // executed_timestamp is the timestamp when the withdrawal was executed
  google.protobuf.Timestamp executed_timestamp = 6 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
}
