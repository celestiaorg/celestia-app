syntax = "proto3";
package celestia.fibre.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/celestiaorg/celestia-app/x/fibre/types";

// EventDepositToEscrow is emitted when a deposit is made to an escrow account.
message EventDepositToEscrow {
  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false];
}

// EventWithdrawFromEscrowRequest is emitted when a withdrawal is requested from an escrow account.
message EventWithdrawFromEscrowRequest {
  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false];
  google.protobuf.Timestamp available_at = 3 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
}

// EventWithdrawFromEscrowExecuted is emitted when a withdrawal is processed.
message EventWithdrawFromEscrowExecuted {
  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false];
}

// EventPayForFibre is emitted when a payment for fibre is processed.
message EventPayForFibre {
  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  bytes namespace = 2;
  bytes commitment = 3;
}

// EventPaymentPromiseTimeout is emitted when a PaymentPromise timeout is processed.
message EventPaymentPromiseTimeout {
  string processor = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string escrow_signer = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  bytes promise_hash = 3;
}
