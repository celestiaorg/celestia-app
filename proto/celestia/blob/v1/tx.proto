syntax = "proto3";
package celestia.blob.v1;

import "celestia/blob/v1/params.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/celestiaorg/celestia-app/x/blob/types";

// Msg defines the blob Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // PayForBlobs allows the user to pay for the inclusion of one or more blobs
  rpc PayForBlobs(MsgPayForBlobs) returns (MsgPayForBlobsResponse) {
    option (google.api.http) = {
      post: "/blob/v1/payforblobs",
      body: "*"
    };
  }

  // UpdateBlobParams defines a rpc handler method for MsgUpdateBlobParams.
  rpc UpdateBlobParams(MsgUpdateBlobParams) returns (MsgUpdateBlobParamsResponse);
}

// MsgPayForBlobs pays for the inclusion of a blob in the block.
message MsgPayForBlobs {
  option (cosmos.msg.v1.signer) = "signer";

  // signer is the bech32 encoded signer address. See
  // https://en.bitcoin.it/wiki/Bech32.
  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // namespaces is a list of namespaces that the blobs are associated with. A
  // namespace is a byte slice of length 29 where the first byte is the
  // namespaceVersion and the subsequent 28 bytes are the namespaceId.
  repeated bytes namespaces = 2;
  // blob_sizes is a list of blob sizes (one per blob). Each size is in bytes.
  repeated uint32 blob_sizes = 3;
  // share_commitments is a list of share commitments (one per blob).
  repeated bytes share_commitments = 4;
  // share_versions are the versions of the share format that the blobs
  // associated with this message should use when included in a block. The
  // share_versions specified must match the share_versions used to generate the
  // share_commitment in this message.
  repeated uint32 share_versions = 8;
}

// MsgPayForBlobsResponse describes the response returned after the submission
// of a PayForBlobs
message MsgPayForBlobsResponse {}

// MsgUpdateBlobParams defines the sdk.Msg type to update the client parameters.
message MsgUpdateBlobParams {
  option (cosmos.msg.v1.signer) = "authority";
  // authority is the address of the governance account.
  string authority = 1;
  // params defines the blob parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false];
}

// MsgUpdateBlobParamsResponse defines the MsgUpdateBlobParams response type.
message MsgUpdateBlobParamsResponse {}
