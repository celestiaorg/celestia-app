package types

import (
	"bytes"
	"encoding/binary"
	"encoding/hex"
	"errors"
	"fmt"
	"io"
)

// StateTransitionPublicValues defines the set of public values associated with a proof generated by a ZK program.
type StateTransitionPublicValues struct {
	// CelestiaHeaderHash is the hash of the celestia header at which new_height is available.
	CelestiaHeaderHash [32]byte
	// TrustedHeight is the trusted block height from which we are updating.
	TrustedHeight uint64
	// TrustedStateRoot is the trusted state root from which we are updating.
	TrustedStateRoot [32]byte
	// NewHeight is the block height associated with the new header.
	NewHeight uint64
	// NewStateRoot is the resulting state root after applying the state transition.
	NewStateRoot [32]byte
	// Namespace is the celestia namespace used by the application.
	Namespace [29]byte
	// PublicKey is the public key of the sequencer.
	PublicKey [32]byte
}

// String implements the fmt.Stringer interface.
func (p *StateTransitionPublicValues) String() string {
	return fmt.Sprintf(`PublicInputs{
  CelestiaHeaderHash: %s,
  TrustedHeight:      %d,
  TrustedStateRoot:   %s,
  NewHeight:          %d,
  NewStateRoot:       %s,
  Namespace:          %s,
  PublicKey:          %s,
}`,
		hex.EncodeToString(p.CelestiaHeaderHash[:]),
		p.TrustedHeight,
		hex.EncodeToString(p.TrustedStateRoot[:]),
		p.NewHeight,
		hex.EncodeToString(p.NewStateRoot[:]),
		hex.EncodeToString(p.Namespace[:]),
		hex.EncodeToString(p.PublicKey[:]),
	)
}

// Marshal encodes the PublicInputs struct into a bincode-compatible byte slice.
// The output format uses Rust bincode's default configuration: (little-endian, fixed-width integers, length-prefixed slices).
func (pi *StateTransitionPublicValues) Marshal() ([]byte, error) {
	var buf bytes.Buffer

	if err := writeBytes(&buf, pi.CelestiaHeaderHash[:]); err != nil {
		return nil, fmt.Errorf("write CelestiaHeaderHash: %w", err)
	}

	if err := binary.Write(&buf, binary.LittleEndian, pi.TrustedHeight); err != nil {
		return nil, fmt.Errorf("write TrustedHeight: %w", err)
	}

	if err := writeBytes(&buf, pi.TrustedStateRoot[:]); err != nil {
		return nil, fmt.Errorf("write TrustedStateRoot: %w", err)
	}

	if err := binary.Write(&buf, binary.LittleEndian, pi.NewHeight); err != nil {
		return nil, fmt.Errorf("write NewHeight: %w", err)
	}

	if err := writeBytes(&buf, pi.NewStateRoot[:]); err != nil {
		return nil, fmt.Errorf("write NewStateRoot: %w", err)
	}

	if err := writeBytes(&buf, pi.Namespace[:]); err != nil {
		return nil, fmt.Errorf("write Namespace: %w", err)
	}

	if err := writeBytes(&buf, pi.PublicKey[:]); err != nil {
		return nil, fmt.Errorf("write PublicKey: %w", err)
	}

	return buf.Bytes(), nil
}

// Unmarshal decodes a bincode-serialized PublicInputs struct.
// This function expects the input byte slice to be encoded using Rust bincode's
// default configuration: (little-endian, fixed-width integers, length-prefixed slices).
func (pi *StateTransitionPublicValues) Unmarshal(data []byte) error {
	buf := bytes.NewReader(data)

	if err := readBytes(buf, pi.CelestiaHeaderHash[:]); err != nil {
		return fmt.Errorf("read CelestiaHeaderHash: %w", err)
	}

	if err := binary.Read(buf, binary.LittleEndian, &pi.TrustedHeight); err != nil {
		return fmt.Errorf("read TrustedHeight: %w", err)
	}

	if err := readBytes(buf, pi.TrustedStateRoot[:]); err != nil {
		return fmt.Errorf("read TrustedStateRoot: %w", err)
	}

	if err := binary.Read(buf, binary.LittleEndian, &pi.NewHeight); err != nil {
		return fmt.Errorf("read NewHeight: %w", err)
	}

	if err := readBytes(buf, pi.NewStateRoot[:]); err != nil {
		return fmt.Errorf("read NewStateRoot: %w", err)
	}

	if err := readBytes(buf, pi.Namespace[:]); err != nil {
		return fmt.Errorf("read Namespace: %w", err)
	}

	if err := readBytes(buf, pi.PublicKey[:]); err != nil {
		return fmt.Errorf("read PublicKey: %w", err)
	}

	if buf.Len() != 0 {
		return errors.New("trailing data after decoding")
	}

	return nil
}

type StateMembershipPublicValues struct {
	StateRoot  [32]byte
	MessageIds [][32]byte
}

func (m *StateMembershipPublicValues) Unmarshal(data []byte) error {
	buf := bytes.NewReader(data)

	if _, err := buf.Read(m.StateRoot[:]); err != nil {
		return fmt.Errorf("read StateRoot: %w", err)
	}

	var count uint64 // read uint64 (little-endian) length prefix
	if err := binary.Read(buf, binary.LittleEndian, &count); err != nil {
		return fmt.Errorf("read message ids length: %w", err)
	}

	remaining := buf.Len()
	if remaining < int(count*32) {
		return fmt.Errorf("buffer too short: need %d, have %d", count*32, remaining)
	}

	m.MessageIds = make([][32]byte, count)
	for i := 0; i < int(count); i++ {
		if _, err := buf.Read(m.MessageIds[i][:]); err != nil {
			return fmt.Errorf("read message_id %d: %w", i, err)
		}
	}

	return nil
}

func readBytes(buf *bytes.Reader, dst []byte) error {
	n, err := io.ReadFull(buf, dst)
	if err != nil {
		return err
	}
	if n != len(dst) {
		return fmt.Errorf("expected %d bytes, got %d", len(dst), n)
	}
	return nil
}

func writeBytes(w io.Writer, b []byte) error {
	_, err := w.Write(b)
	return err
}
