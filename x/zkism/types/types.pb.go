// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: celestia/zkism/v1/types.proto

package types

import (
	fmt "fmt"
	github_com_bcp_innovations_hyperlane_cosmos_util "github.com/bcp-innovations/hyperlane-cosmos/util"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ZKExecutionISM defines the Hyperlane interchain security module (ISM).
type ZKExecutionISM struct {
	// unique hyperlane identifier
	Id github_com_bcp_innovations_hyperlane_cosmos_util.HexAddress `protobuf:"bytes,1,opt,name=id,proto3,customtype=github.com/bcp-innovations/hyperlane-cosmos/util.HexAddress" json:"id"`
	// the owner or creator of the ism
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// state commitment root of the remote chain
	StateRoot []byte `protobuf:"bytes,3,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	// latest tracked height of the remote chain
	Height uint64 `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	// trusted celestia header hash
	CelestiaHeaderHash []byte `protobuf:"bytes,5,opt,name=celestia_header_hash,json=celestiaHeaderHash,proto3" json:"celestia_header_hash,omitempty"`
	// trusted celestia height
	CelestiaHeight uint64 `protobuf:"varint,6,opt,name=celestia_height,json=celestiaHeight,proto3" json:"celestia_height,omitempty"`
	// the celestia namespace identifier used by the application
	Namespace []byte `protobuf:"bytes,7,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// the public key of the sequencer
	SequencerPublicKey []byte `protobuf:"bytes,8,opt,name=sequencer_public_key,json=sequencerPublicKey,proto3" json:"sequencer_public_key,omitempty"`
	// the sp1 groth16 verifier key
	Groth16Vkey []byte `protobuf:"bytes,9,opt,name=groth16_vkey,json=groth16Vkey,proto3" json:"groth16_vkey,omitempty"`
	// hash-based commitment to the verifier key used for state transition
	StateTransitionVkey []byte `protobuf:"bytes,10,opt,name=state_transition_vkey,json=stateTransitionVkey,proto3" json:"state_transition_vkey,omitempty"`
	// hash-based commitment to the verifier key used for state membership
	StateMembershipVkey []byte `protobuf:"bytes,11,opt,name=state_membership_vkey,json=stateMembershipVkey,proto3" json:"state_membership_vkey,omitempty"`
}

func (m *ZKExecutionISM) Reset()         { *m = ZKExecutionISM{} }
func (m *ZKExecutionISM) String() string { return proto.CompactTextString(m) }
func (*ZKExecutionISM) ProtoMessage()    {}
func (*ZKExecutionISM) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a9c62eeaf7a9e81, []int{0}
}
func (m *ZKExecutionISM) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZKExecutionISM) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZKExecutionISM.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZKExecutionISM) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZKExecutionISM.Merge(m, src)
}
func (m *ZKExecutionISM) XXX_Size() int {
	return m.Size()
}
func (m *ZKExecutionISM) XXX_DiscardUnknown() {
	xxx_messageInfo_ZKExecutionISM.DiscardUnknown(m)
}

var xxx_messageInfo_ZKExecutionISM proto.InternalMessageInfo

// Params defines the zk ism module parameters.
type Params struct {
	MaxHeaderHashes uint32 `protobuf:"varint,1,opt,name=max_header_hashes,json=maxHeaderHashes,proto3" json:"max_header_hashes,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a9c62eeaf7a9e81, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ZKExecutionISM)(nil), "celestia.zkism.v1.ZKExecutionISM")
	proto.RegisterType((*Params)(nil), "celestia.zkism.v1.Params")
}

func init() { proto.RegisterFile("celestia/zkism/v1/types.proto", fileDescriptor_6a9c62eeaf7a9e81) }

var fileDescriptor_6a9c62eeaf7a9e81 = []byte{
	// 504 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x52, 0xcf, 0x6e, 0xd3, 0x3e,
	0x1c, 0x6f, 0xfa, 0xeb, 0xfa, 0xa3, 0xde, 0xd8, 0x34, 0x53, 0x50, 0x98, 0x58, 0x5a, 0x76, 0xa1,
	0x42, 0x6a, 0x42, 0x41, 0xe2, 0x30, 0x4e, 0x0c, 0x21, 0x15, 0x55, 0x93, 0xa6, 0x14, 0x71, 0xd8,
	0x25, 0x72, 0xd3, 0xaf, 0x62, 0xab, 0x4d, 0x1c, 0x6c, 0xb7, 0x24, 0x3c, 0xc1, 0x8e, 0x3c, 0x02,
	0x0f, 0xc1, 0x43, 0xec, 0x38, 0x71, 0x42, 0x1c, 0x26, 0xd4, 0xbe, 0x08, 0x8a, 0x9d, 0x66, 0xe5,
	0x66, 0x7f, 0xfe, 0xd9, 0xfa, 0xe8, 0x83, 0x8e, 0x43, 0x98, 0x83, 0x54, 0x8c, 0x78, 0x5f, 0x67,
	0x4c, 0xc6, 0xde, 0x72, 0xe0, 0xa9, 0x3c, 0x05, 0xe9, 0xa6, 0x82, 0x2b, 0x8e, 0x0f, 0x37, 0xb4,
	0xab, 0x69, 0x77, 0x39, 0x38, 0x7a, 0x1c, 0x72, 0x19, 0x73, 0x19, 0x68, 0x81, 0x67, 0x2e, 0x46,
	0x7d, 0xd4, 0x8e, 0x78, 0xc4, 0x0d, 0x5e, 0x9c, 0x0c, 0x7a, 0x72, 0xd5, 0x40, 0xfb, 0x97, 0xa3,
	0xf7, 0x19, 0x84, 0x0b, 0xc5, 0x78, 0xf2, 0x61, 0x7c, 0x8e, 0xc7, 0xa8, 0xce, 0xa6, 0xb6, 0xd5,
	0xb5, 0x7a, 0xad, 0xb3, 0x77, 0xd7, 0xb7, 0x9d, 0xda, 0xef, 0xdb, 0xce, 0x9b, 0x88, 0x29, 0xba,
	0x98, 0xb8, 0x21, 0x8f, 0xbd, 0x49, 0x98, 0xf6, 0x59, 0x92, 0xf0, 0x25, 0x29, 0x1c, 0xd2, 0xa3,
	0x79, 0x0a, 0x62, 0x4e, 0x12, 0xe8, 0x9b, 0xf7, 0xbc, 0x85, 0x62, 0x73, 0x77, 0x08, 0xd9, 0xdb,
	0xe9, 0x54, 0x80, 0x94, 0x7e, 0x9d, 0x4d, 0xb1, 0x8b, 0x76, 0xf8, 0x97, 0x04, 0x84, 0x5d, 0xd7,
	0xb9, 0xf6, 0xcf, 0x1f, 0xfd, 0x76, 0xf9, 0xbd, 0x52, 0x36, 0x56, 0x82, 0x25, 0x91, 0x6f, 0x64,
	0xf8, 0x18, 0x21, 0xa9, 0x88, 0x82, 0x40, 0x70, 0xae, 0xec, 0xff, 0xba, 0x56, 0x6f, 0xcf, 0x6f,
	0x69, 0xc4, 0xe7, 0x5c, 0xe1, 0x47, 0xa8, 0x49, 0x81, 0x45, 0x54, 0xd9, 0x8d, 0xae, 0xd5, 0x6b,
	0xf8, 0xe5, 0x0d, 0xbf, 0x40, 0xed, 0x4d, 0x29, 0x01, 0x05, 0x32, 0x05, 0x11, 0x50, 0x22, 0xa9,
	0xbd, 0xa3, 0x03, 0xf0, 0x86, 0x1b, 0x6a, 0x6a, 0x48, 0x24, 0xc5, 0xcf, 0xd0, 0xc1, 0x96, 0x43,
	0x47, 0x36, 0x75, 0xe4, 0xfe, 0x9d, 0x58, 0x47, 0x3f, 0x41, 0xad, 0x84, 0xc4, 0x20, 0x53, 0x12,
	0x82, 0xfd, 0xbf, 0xf9, 0x50, 0x05, 0x14, 0x0f, 0x4b, 0xf8, 0xbc, 0x80, 0x24, 0x04, 0x11, 0xa4,
	0x8b, 0xc9, 0x9c, 0x85, 0xc1, 0x0c, 0x72, 0xfb, 0x9e, 0x79, 0xb8, 0xe2, 0x2e, 0x34, 0x35, 0x82,
	0x1c, 0x3f, 0x45, 0x7b, 0x91, 0xe0, 0x8a, 0x0e, 0x5e, 0x07, 0xcb, 0x42, 0xd9, 0xd2, 0xca, 0xdd,
	0x12, 0xfb, 0x34, 0x83, 0x1c, 0xbf, 0x44, 0x0f, 0x4d, 0x09, 0x4a, 0x90, 0x44, 0xb2, 0xa2, 0x6e,
	0xa3, 0x45, 0x5a, 0xfb, 0x40, 0x93, 0x1f, 0x2b, 0xee, 0x5f, 0x4f, 0x0c, 0xf1, 0x04, 0x84, 0xa4,
	0x2c, 0x35, 0x9e, 0xdd, 0x2d, 0xcf, 0x79, 0xc5, 0x15, 0x9e, 0xd3, 0xc6, 0xd5, 0xf7, 0x4e, 0xed,
	0xe4, 0x14, 0x35, 0x2f, 0x88, 0x20, 0xb1, 0xc4, 0xcf, 0xd1, 0x61, 0x4c, 0xb2, 0xed, 0x02, 0x41,
	0xea, 0x41, 0xdc, 0xf7, 0x0f, 0x62, 0x92, 0xdd, 0xb5, 0x07, 0xd2, 0x78, 0xcf, 0x46, 0xd7, 0x2b,
	0xc7, 0xba, 0x59, 0x39, 0xd6, 0x9f, 0x95, 0x63, 0x7d, 0x5b, 0x3b, 0xb5, 0x9b, 0xb5, 0x53, 0xfb,
	0xb5, 0x76, 0x6a, 0x97, 0x83, 0xad, 0xe5, 0x6c, 0x1a, 0xe5, 0x22, 0xaa, 0xce, 0x7d, 0x92, 0xa6,
	0x5e, 0x56, 0x0e, 0x5c, 0xaf, 0x7b, 0xd2, 0xd4, 0xd3, 0x7c, 0xf5, 0x37, 0x00, 0x00, 0xff, 0xff,
	0x85, 0x3f, 0x5c, 0x79, 0xff, 0x02, 0x00, 0x00,
}

func (m *ZKExecutionISM) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZKExecutionISM) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZKExecutionISM) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StateMembershipVkey) > 0 {
		i -= len(m.StateMembershipVkey)
		copy(dAtA[i:], m.StateMembershipVkey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.StateMembershipVkey)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.StateTransitionVkey) > 0 {
		i -= len(m.StateTransitionVkey)
		copy(dAtA[i:], m.StateTransitionVkey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.StateTransitionVkey)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Groth16Vkey) > 0 {
		i -= len(m.Groth16Vkey)
		copy(dAtA[i:], m.Groth16Vkey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Groth16Vkey)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.SequencerPublicKey) > 0 {
		i -= len(m.SequencerPublicKey)
		copy(dAtA[i:], m.SequencerPublicKey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SequencerPublicKey)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CelestiaHeight != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CelestiaHeight))
		i--
		dAtA[i] = 0x30
	}
	if len(m.CelestiaHeaderHash) > 0 {
		i -= len(m.CelestiaHeaderHash)
		copy(dAtA[i:], m.CelestiaHeaderHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CelestiaHeaderHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Height != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x20
	}
	if len(m.StateRoot) > 0 {
		i -= len(m.StateRoot)
		copy(dAtA[i:], m.StateRoot)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.StateRoot)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.Id.Size()
		i -= size
		if _, err := m.Id.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxHeaderHashes != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxHeaderHashes))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ZKExecutionISM) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Id.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.StateRoot)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovTypes(uint64(m.Height))
	}
	l = len(m.CelestiaHeaderHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CelestiaHeight != 0 {
		n += 1 + sovTypes(uint64(m.CelestiaHeight))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SequencerPublicKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Groth16Vkey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.StateTransitionVkey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.StateMembershipVkey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxHeaderHashes != 0 {
		n += 1 + sovTypes(uint64(m.MaxHeaderHashes))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ZKExecutionISM) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZKExecutionISM: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZKExecutionISM: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateRoot = append(m.StateRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.StateRoot == nil {
				m.StateRoot = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CelestiaHeaderHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CelestiaHeaderHash = append(m.CelestiaHeaderHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CelestiaHeaderHash == nil {
				m.CelestiaHeaderHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CelestiaHeight", wireType)
			}
			m.CelestiaHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CelestiaHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = append(m.Namespace[:0], dAtA[iNdEx:postIndex]...)
			if m.Namespace == nil {
				m.Namespace = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequencerPublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SequencerPublicKey = append(m.SequencerPublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.SequencerPublicKey == nil {
				m.SequencerPublicKey = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groth16Vkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groth16Vkey = append(m.Groth16Vkey[:0], dAtA[iNdEx:postIndex]...)
			if m.Groth16Vkey == nil {
				m.Groth16Vkey = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateTransitionVkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateTransitionVkey = append(m.StateTransitionVkey[:0], dAtA[iNdEx:postIndex]...)
			if m.StateTransitionVkey == nil {
				m.StateTransitionVkey = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateMembershipVkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateMembershipVkey = append(m.StateMembershipVkey[:0], dAtA[iNdEx:postIndex]...)
			if m.StateMembershipVkey == nil {
				m.StateMembershipVkey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxHeaderHashes", wireType)
			}
			m.MaxHeaderHashes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxHeaderHashes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
