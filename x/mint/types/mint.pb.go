// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: celestia/mint/v1/mint.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Minter represents the mint state.
type Minter struct {
	// InflationRate is the rate at which new tokens should be minted for the
	// current year. For example if InflationRate=0.1, then 10% of the total
	// supply will be minted over the course of the year.
	InflationRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=inflation_rate,json=inflationRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"inflation_rate"`
	// AnnualProvisions is the total number of tokens to be minted in the current
	// year due to inflation.
	AnnualProvisions cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=annual_provisions,json=annualProvisions,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"annual_provisions"`
	// PreviousBlockTime is the timestamp of the previous block.
	PreviousBlockTime *time.Time `protobuf:"bytes,4,opt,name=previous_block_time,json=previousBlockTime,proto3,stdtime" json:"previous_block_time,omitempty"`
	// BondDenom is the denomination of the token that should be minted.
	BondDenom string `protobuf:"bytes,5,opt,name=bond_denom,json=bondDenom,proto3" json:"bond_denom,omitempty"`
}

func (m *Minter) Reset()         { *m = Minter{} }
func (m *Minter) String() string { return proto.CompactTextString(m) }
func (*Minter) ProtoMessage()    {}
func (*Minter) Descriptor() ([]byte, []int) {
	return fileDescriptor_962d7cf1c9c59571, []int{0}
}
func (m *Minter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Minter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Minter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Minter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Minter.Merge(m, src)
}
func (m *Minter) XXX_Size() int {
	return m.Size()
}
func (m *Minter) XXX_DiscardUnknown() {
	xxx_messageInfo_Minter.DiscardUnknown(m)
}

var xxx_messageInfo_Minter proto.InternalMessageInfo

func (m *Minter) GetPreviousBlockTime() *time.Time {
	if m != nil {
		return m.PreviousBlockTime
	}
	return nil
}

func (m *Minter) GetBondDenom() string {
	if m != nil {
		return m.BondDenom
	}
	return ""
}

// GenesisTime contains the timestamp of the genesis block.
type GenesisTime struct {
	// GenesisTime is the timestamp of the genesis block.
	GenesisTime *time.Time `protobuf:"bytes,1,opt,name=genesis_time,json=genesisTime,proto3,stdtime" json:"genesis_time,omitempty"`
}

func (m *GenesisTime) Reset()         { *m = GenesisTime{} }
func (m *GenesisTime) String() string { return proto.CompactTextString(m) }
func (*GenesisTime) ProtoMessage()    {}
func (*GenesisTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_962d7cf1c9c59571, []int{1}
}
func (m *GenesisTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisTime.Merge(m, src)
}
func (m *GenesisTime) XXX_Size() int {
	return m.Size()
}
func (m *GenesisTime) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisTime.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisTime proto.InternalMessageInfo

func (m *GenesisTime) GetGenesisTime() *time.Time {
	if m != nil {
		return m.GenesisTime
	}
	return nil
}

func init() {
	proto.RegisterType((*Minter)(nil), "celestia.mint.v1.Minter")
	proto.RegisterType((*GenesisTime)(nil), "celestia.mint.v1.GenesisTime")
}

func init() { proto.RegisterFile("celestia/mint/v1/mint.proto", fileDescriptor_962d7cf1c9c59571) }

var fileDescriptor_962d7cf1c9c59571 = []byte{
	// 387 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0x8d, 0x57, 0xcb, 0x4a, 0xeb, 0x02, 0xda, 0x0d, 0x1c, 0x42, 0x57, 0x24, 0xab, 0x3d, 0xed,
	0xa5, 0x36, 0x85, 0x3f, 0x08, 0x95, 0x90, 0x10, 0x48, 0x55, 0xc4, 0x01, 0x71, 0x20, 0x72, 0x52,
	0xd7, 0xb5, 0x9a, 0x78, 0xa2, 0xd8, 0x89, 0xe8, 0x5f, 0xf4, 0x5f, 0xe0, 0x23, 0x7a, 0xac, 0x38,
	0x21, 0x0e, 0x05, 0xb5, 0x3f, 0x82, 0x1c, 0x37, 0xe5, 0x8a, 0x38, 0x79, 0x66, 0xde, 0xcc, 0x7b,
	0xe3, 0xa7, 0xc1, 0x37, 0x39, 0x2f, 0xb8, 0x36, 0x92, 0xd1, 0x52, 0x2a, 0x43, 0xdb, 0x71, 0xf7,
	0x92, 0xaa, 0x06, 0x03, 0xfe, 0x55, 0x0f, 0x92, 0xae, 0xd8, 0x8e, 0x87, 0x4f, 0x05, 0x08, 0xe8,
	0x40, 0x6a, 0x23, 0xd7, 0x37, 0x7c, 0x96, 0x83, 0x2e, 0x41, 0xa7, 0x0e, 0x70, 0xc9, 0x11, 0x8a,
	0x04, 0x80, 0x28, 0x38, 0xed, 0xb2, 0xac, 0x99, 0x53, 0x23, 0x4b, 0xae, 0x0d, 0x2b, 0x2b, 0xd7,
	0x70, 0xf7, 0xf5, 0x0c, 0x5f, 0xbc, 0x97, 0xca, 0xf0, 0xda, 0xff, 0x88, 0x1f, 0x4b, 0x35, 0x2f,
	0x98, 0x91, 0xa0, 0xd2, 0x9a, 0x19, 0x1e, 0xa0, 0x5b, 0x74, 0x7f, 0x19, 0x8f, 0x37, 0xbb, 0xc8,
	0xfb, 0xb9, 0x8b, 0x6e, 0x1c, 0xb3, 0x9e, 0x2d, 0x89, 0x04, 0x5a, 0x32, 0xb3, 0x20, 0xef, 0xb8,
	0x60, 0xf9, 0x6a, 0xc2, 0xf3, 0xef, 0xdf, 0x46, 0xf8, 0x28, 0x3c, 0xe1, 0x79, 0xf2, 0xe8, 0x44,
	0x94, 0x30, 0xc3, 0xfd, 0xcf, 0xf8, 0x9a, 0x29, 0xd5, 0xb0, 0xc2, 0xae, 0xd8, 0x4a, 0x2d, 0x41,
	0xe9, 0xe0, 0xec, 0x7f, 0xc9, 0xaf, 0x1c, 0xd7, 0xf4, 0x44, 0xe5, 0x4f, 0xf1, 0x93, 0xaa, 0xe6,
	0xad, 0x84, 0x46, 0xa7, 0x59, 0x01, 0xf9, 0x32, 0xb5, 0xdf, 0x0c, 0xce, 0x6f, 0xd1, 0xfd, 0xe0,
	0xe5, 0x90, 0x38, 0x0f, 0x48, 0xef, 0x01, 0xf9, 0xd0, 0x7b, 0x10, 0x9f, 0xaf, 0x7f, 0x45, 0x28,
	0xb9, 0xee, 0x87, 0x63, 0x3b, 0x6b, 0x51, 0xff, 0x39, 0xc6, 0x19, 0xa8, 0x59, 0x3a, 0xe3, 0x0a,
	0xca, 0xe0, 0x81, 0x5d, 0x35, 0xb9, 0xb4, 0x95, 0x89, 0x2d, 0xdc, 0x25, 0x78, 0xf0, 0x86, 0x2b,
	0xae, 0xa5, 0xee, 0xba, 0x5f, 0xe3, 0x87, 0xc2, 0xa5, 0x4e, 0x18, 0xfd, 0xa3, 0xf0, 0x40, 0xfc,
	0x25, 0x89, 0xdf, 0x6e, 0xf6, 0x21, 0xda, 0xee, 0x43, 0xf4, 0x7b, 0x1f, 0xa2, 0xf5, 0x21, 0xf4,
	0xb6, 0x87, 0xd0, 0xfb, 0x71, 0x08, 0xbd, 0x4f, 0x2f, 0x84, 0x34, 0x8b, 0x26, 0x23, 0x39, 0x94,
	0xb4, 0x3f, 0x09, 0xa8, 0xc5, 0x29, 0x1e, 0xb1, 0xaa, 0xa2, 0x5f, 0xdc, 0x05, 0x99, 0x55, 0xc5,
	0x75, 0x76, 0xd1, 0x49, 0xbe, 0xfa, 0x13, 0x00, 0x00, 0xff, 0xff, 0x99, 0x6b, 0x6f, 0xac, 0x5f,
	0x02, 0x00, 0x00,
}

func (m *Minter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Minter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Minter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BondDenom) > 0 {
		i -= len(m.BondDenom)
		copy(dAtA[i:], m.BondDenom)
		i = encodeVarintMint(dAtA, i, uint64(len(m.BondDenom)))
		i--
		dAtA[i] = 0x2a
	}
	if m.PreviousBlockTime != nil {
		n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.PreviousBlockTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.PreviousBlockTime):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintMint(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.AnnualProvisions.Size()
		i -= size
		if _, err := m.AnnualProvisions.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMint(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.InflationRate.Size()
		i -= size
		if _, err := m.InflationRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMint(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GenesisTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GenesisTime != nil {
		n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.GenesisTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.GenesisTime):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintMint(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMint(dAtA []byte, offset int, v uint64) int {
	offset -= sovMint(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Minter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.InflationRate.Size()
	n += 1 + l + sovMint(uint64(l))
	l = m.AnnualProvisions.Size()
	n += 1 + l + sovMint(uint64(l))
	if m.PreviousBlockTime != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.PreviousBlockTime)
		n += 1 + l + sovMint(uint64(l))
	}
	l = len(m.BondDenom)
	if l > 0 {
		n += 1 + l + sovMint(uint64(l))
	}
	return n
}

func (m *GenesisTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GenesisTime != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.GenesisTime)
		n += 1 + l + sovMint(uint64(l))
	}
	return n
}

func sovMint(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMint(x uint64) (n int) {
	return sovMint(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Minter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Minter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Minter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InflationRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InflationRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnnualProvisions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AnnualProvisions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousBlockTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreviousBlockTime == nil {
				m.PreviousBlockTime = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.PreviousBlockTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GenesisTime == nil {
				m.GenesisTime = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.GenesisTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMint(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMint
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMint
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMint
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMint
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMint        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMint          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMint = fmt.Errorf("proto: unexpected end of group")
)
