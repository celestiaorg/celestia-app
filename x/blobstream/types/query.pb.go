// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: celestia/qgb/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8535c57355a2b91, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8535c57355a2b91, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryAttestationRequestByNonceRequest
type QueryAttestationRequestByNonceRequest struct {
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryAttestationRequestByNonceRequest) Reset()         { *m = QueryAttestationRequestByNonceRequest{} }
func (m *QueryAttestationRequestByNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAttestationRequestByNonceRequest) ProtoMessage()    {}
func (*QueryAttestationRequestByNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8535c57355a2b91, []int{2}
}
func (m *QueryAttestationRequestByNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAttestationRequestByNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAttestationRequestByNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAttestationRequestByNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAttestationRequestByNonceRequest.Merge(m, src)
}
func (m *QueryAttestationRequestByNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAttestationRequestByNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAttestationRequestByNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAttestationRequestByNonceRequest proto.InternalMessageInfo

func (m *QueryAttestationRequestByNonceRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// QueryAttestationRequestByNonceResponse
type QueryAttestationRequestByNonceResponse struct {
	// AttestationRequestI can be either a DataCommitment or a Valset.
	// This was decided as part of the universal nonce approach under:
	// https://github.com/celestiaorg/celestia-app/issues/468#issuecomment-1156887715
	Attestation *types.Any `protobuf:"bytes,1,opt,name=attestation,proto3" json:"attestation,omitempty"`
}

func (m *QueryAttestationRequestByNonceResponse) Reset() {
	*m = QueryAttestationRequestByNonceResponse{}
}
func (m *QueryAttestationRequestByNonceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAttestationRequestByNonceResponse) ProtoMessage()    {}
func (*QueryAttestationRequestByNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8535c57355a2b91, []int{3}
}
func (m *QueryAttestationRequestByNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAttestationRequestByNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAttestationRequestByNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAttestationRequestByNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAttestationRequestByNonceResponse.Merge(m, src)
}
func (m *QueryAttestationRequestByNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAttestationRequestByNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAttestationRequestByNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAttestationRequestByNonceResponse proto.InternalMessageInfo

func (m *QueryAttestationRequestByNonceResponse) GetAttestation() *types.Any {
	if m != nil {
		return m.Attestation
	}
	return nil
}

// QueryLatestAttestationNonceRequest latest attestation nonce request
type QueryLatestAttestationNonceRequest struct {
}

func (m *QueryLatestAttestationNonceRequest) Reset()         { *m = QueryLatestAttestationNonceRequest{} }
func (m *QueryLatestAttestationNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLatestAttestationNonceRequest) ProtoMessage()    {}
func (*QueryLatestAttestationNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8535c57355a2b91, []int{4}
}
func (m *QueryLatestAttestationNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestAttestationNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestAttestationNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestAttestationNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestAttestationNonceRequest.Merge(m, src)
}
func (m *QueryLatestAttestationNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestAttestationNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestAttestationNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestAttestationNonceRequest proto.InternalMessageInfo

// QueryLatestAttestationNonceResponse latest attestation nonce response
type QueryLatestAttestationNonceResponse struct {
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryLatestAttestationNonceResponse) Reset()         { *m = QueryLatestAttestationNonceResponse{} }
func (m *QueryLatestAttestationNonceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLatestAttestationNonceResponse) ProtoMessage()    {}
func (*QueryLatestAttestationNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8535c57355a2b91, []int{5}
}
func (m *QueryLatestAttestationNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestAttestationNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestAttestationNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestAttestationNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestAttestationNonceResponse.Merge(m, src)
}
func (m *QueryLatestAttestationNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestAttestationNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestAttestationNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestAttestationNonceResponse proto.InternalMessageInfo

func (m *QueryLatestAttestationNonceResponse) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// QueryEarliestAttestationNonceRequest earliest attestation nonce request
type QueryEarliestAttestationNonceRequest struct {
}

func (m *QueryEarliestAttestationNonceRequest) Reset()         { *m = QueryEarliestAttestationNonceRequest{} }
func (m *QueryEarliestAttestationNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEarliestAttestationNonceRequest) ProtoMessage()    {}
func (*QueryEarliestAttestationNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8535c57355a2b91, []int{6}
}
func (m *QueryEarliestAttestationNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEarliestAttestationNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEarliestAttestationNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEarliestAttestationNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEarliestAttestationNonceRequest.Merge(m, src)
}
func (m *QueryEarliestAttestationNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEarliestAttestationNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEarliestAttestationNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEarliestAttestationNonceRequest proto.InternalMessageInfo

// QueryEarliestAttestationNonceResponse earliest attestation nonce response
type QueryEarliestAttestationNonceResponse struct {
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryEarliestAttestationNonceResponse) Reset()         { *m = QueryEarliestAttestationNonceResponse{} }
func (m *QueryEarliestAttestationNonceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEarliestAttestationNonceResponse) ProtoMessage()    {}
func (*QueryEarliestAttestationNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8535c57355a2b91, []int{7}
}
func (m *QueryEarliestAttestationNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEarliestAttestationNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEarliestAttestationNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEarliestAttestationNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEarliestAttestationNonceResponse.Merge(m, src)
}
func (m *QueryEarliestAttestationNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEarliestAttestationNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEarliestAttestationNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEarliestAttestationNonceResponse proto.InternalMessageInfo

func (m *QueryEarliestAttestationNonceResponse) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// QueryLatestValsetRequestBeforeNonceRequest latest Valset request before
// universal nonce request
type QueryLatestValsetRequestBeforeNonceRequest struct {
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryLatestValsetRequestBeforeNonceRequest) Reset() {
	*m = QueryLatestValsetRequestBeforeNonceRequest{}
}
func (m *QueryLatestValsetRequestBeforeNonceRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryLatestValsetRequestBeforeNonceRequest) ProtoMessage() {}
func (*QueryLatestValsetRequestBeforeNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8535c57355a2b91, []int{8}
}
func (m *QueryLatestValsetRequestBeforeNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestValsetRequestBeforeNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestValsetRequestBeforeNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestValsetRequestBeforeNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestValsetRequestBeforeNonceRequest.Merge(m, src)
}
func (m *QueryLatestValsetRequestBeforeNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestValsetRequestBeforeNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestValsetRequestBeforeNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestValsetRequestBeforeNonceRequest proto.InternalMessageInfo

func (m *QueryLatestValsetRequestBeforeNonceRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// QueryLatestValsetRequestBeforeNonceResponse latest Valset request before
// height response
type QueryLatestValsetRequestBeforeNonceResponse struct {
	Valset *Valset `protobuf:"bytes,1,opt,name=valset,proto3" json:"valset,omitempty"`
}

func (m *QueryLatestValsetRequestBeforeNonceResponse) Reset() {
	*m = QueryLatestValsetRequestBeforeNonceResponse{}
}
func (m *QueryLatestValsetRequestBeforeNonceResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryLatestValsetRequestBeforeNonceResponse) ProtoMessage() {}
func (*QueryLatestValsetRequestBeforeNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8535c57355a2b91, []int{9}
}
func (m *QueryLatestValsetRequestBeforeNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestValsetRequestBeforeNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestValsetRequestBeforeNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestValsetRequestBeforeNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestValsetRequestBeforeNonceResponse.Merge(m, src)
}
func (m *QueryLatestValsetRequestBeforeNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestValsetRequestBeforeNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestValsetRequestBeforeNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestValsetRequestBeforeNonceResponse proto.InternalMessageInfo

func (m *QueryLatestValsetRequestBeforeNonceResponse) GetValset() *Valset {
	if m != nil {
		return m.Valset
	}
	return nil
}

// QueryLatestUnbondingHeightRequest
type QueryLatestUnbondingHeightRequest struct {
}

func (m *QueryLatestUnbondingHeightRequest) Reset()         { *m = QueryLatestUnbondingHeightRequest{} }
func (m *QueryLatestUnbondingHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLatestUnbondingHeightRequest) ProtoMessage()    {}
func (*QueryLatestUnbondingHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8535c57355a2b91, []int{10}
}
func (m *QueryLatestUnbondingHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestUnbondingHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestUnbondingHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestUnbondingHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestUnbondingHeightRequest.Merge(m, src)
}
func (m *QueryLatestUnbondingHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestUnbondingHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestUnbondingHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestUnbondingHeightRequest proto.InternalMessageInfo

// QueryLatestUnbondingHeightResponse
type QueryLatestUnbondingHeightResponse struct {
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryLatestUnbondingHeightResponse) Reset()         { *m = QueryLatestUnbondingHeightResponse{} }
func (m *QueryLatestUnbondingHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLatestUnbondingHeightResponse) ProtoMessage()    {}
func (*QueryLatestUnbondingHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8535c57355a2b91, []int{11}
}
func (m *QueryLatestUnbondingHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestUnbondingHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestUnbondingHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestUnbondingHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestUnbondingHeightResponse.Merge(m, src)
}
func (m *QueryLatestUnbondingHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestUnbondingHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestUnbondingHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestUnbondingHeightResponse proto.InternalMessageInfo

func (m *QueryLatestUnbondingHeightResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// QueryLatestDataCommitmentRequest
type QueryLatestDataCommitmentRequest struct {
}

func (m *QueryLatestDataCommitmentRequest) Reset()         { *m = QueryLatestDataCommitmentRequest{} }
func (m *QueryLatestDataCommitmentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLatestDataCommitmentRequest) ProtoMessage()    {}
func (*QueryLatestDataCommitmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8535c57355a2b91, []int{12}
}
func (m *QueryLatestDataCommitmentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestDataCommitmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestDataCommitmentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestDataCommitmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestDataCommitmentRequest.Merge(m, src)
}
func (m *QueryLatestDataCommitmentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestDataCommitmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestDataCommitmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestDataCommitmentRequest proto.InternalMessageInfo

// QueryLatestDataCommitmentResponse
type QueryLatestDataCommitmentResponse struct {
	DataCommitment *DataCommitment `protobuf:"bytes,1,opt,name=data_commitment,json=dataCommitment,proto3" json:"data_commitment,omitempty"`
}

func (m *QueryLatestDataCommitmentResponse) Reset()         { *m = QueryLatestDataCommitmentResponse{} }
func (m *QueryLatestDataCommitmentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLatestDataCommitmentResponse) ProtoMessage()    {}
func (*QueryLatestDataCommitmentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8535c57355a2b91, []int{13}
}
func (m *QueryLatestDataCommitmentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestDataCommitmentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestDataCommitmentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestDataCommitmentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestDataCommitmentResponse.Merge(m, src)
}
func (m *QueryLatestDataCommitmentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestDataCommitmentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestDataCommitmentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestDataCommitmentResponse proto.InternalMessageInfo

func (m *QueryLatestDataCommitmentResponse) GetDataCommitment() *DataCommitment {
	if m != nil {
		return m.DataCommitment
	}
	return nil
}

// QueryDataCommitmentRangeForHeightRequest
type QueryDataCommitmentRangeForHeightRequest struct {
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryDataCommitmentRangeForHeightRequest) Reset() {
	*m = QueryDataCommitmentRangeForHeightRequest{}
}
func (m *QueryDataCommitmentRangeForHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDataCommitmentRangeForHeightRequest) ProtoMessage()    {}
func (*QueryDataCommitmentRangeForHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8535c57355a2b91, []int{14}
}
func (m *QueryDataCommitmentRangeForHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataCommitmentRangeForHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataCommitmentRangeForHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataCommitmentRangeForHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataCommitmentRangeForHeightRequest.Merge(m, src)
}
func (m *QueryDataCommitmentRangeForHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataCommitmentRangeForHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataCommitmentRangeForHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataCommitmentRangeForHeightRequest proto.InternalMessageInfo

func (m *QueryDataCommitmentRangeForHeightRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// QueryDataCommitmentRangeForHeightResponse
type QueryDataCommitmentRangeForHeightResponse struct {
	DataCommitment *DataCommitment `protobuf:"bytes,1,opt,name=data_commitment,json=dataCommitment,proto3" json:"data_commitment,omitempty"`
}

func (m *QueryDataCommitmentRangeForHeightResponse) Reset() {
	*m = QueryDataCommitmentRangeForHeightResponse{}
}
func (m *QueryDataCommitmentRangeForHeightResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryDataCommitmentRangeForHeightResponse) ProtoMessage() {}
func (*QueryDataCommitmentRangeForHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8535c57355a2b91, []int{15}
}
func (m *QueryDataCommitmentRangeForHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataCommitmentRangeForHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataCommitmentRangeForHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataCommitmentRangeForHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataCommitmentRangeForHeightResponse.Merge(m, src)
}
func (m *QueryDataCommitmentRangeForHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataCommitmentRangeForHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataCommitmentRangeForHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataCommitmentRangeForHeightResponse proto.InternalMessageInfo

func (m *QueryDataCommitmentRangeForHeightResponse) GetDataCommitment() *DataCommitment {
	if m != nil {
		return m.DataCommitment
	}
	return nil
}

// QueryEVMAddressRequest
type QueryEVMAddressRequest struct {
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
}

func (m *QueryEVMAddressRequest) Reset()         { *m = QueryEVMAddressRequest{} }
func (m *QueryEVMAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEVMAddressRequest) ProtoMessage()    {}
func (*QueryEVMAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8535c57355a2b91, []int{16}
}
func (m *QueryEVMAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEVMAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEVMAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEVMAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEVMAddressRequest.Merge(m, src)
}
func (m *QueryEVMAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEVMAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEVMAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEVMAddressRequest proto.InternalMessageInfo

func (m *QueryEVMAddressRequest) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

// QueryEVMAddressResponse
type QueryEVMAddressResponse struct {
	EvmAddress string `protobuf:"bytes,1,opt,name=evm_address,json=evmAddress,proto3" json:"evm_address,omitempty"`
}

func (m *QueryEVMAddressResponse) Reset()         { *m = QueryEVMAddressResponse{} }
func (m *QueryEVMAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEVMAddressResponse) ProtoMessage()    {}
func (*QueryEVMAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8535c57355a2b91, []int{17}
}
func (m *QueryEVMAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEVMAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEVMAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEVMAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEVMAddressResponse.Merge(m, src)
}
func (m *QueryEVMAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEVMAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEVMAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEVMAddressResponse proto.InternalMessageInfo

func (m *QueryEVMAddressResponse) GetEvmAddress() string {
	if m != nil {
		return m.EvmAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "celestia.qgb.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "celestia.qgb.v1.QueryParamsResponse")
	proto.RegisterType((*QueryAttestationRequestByNonceRequest)(nil), "celestia.qgb.v1.QueryAttestationRequestByNonceRequest")
	proto.RegisterType((*QueryAttestationRequestByNonceResponse)(nil), "celestia.qgb.v1.QueryAttestationRequestByNonceResponse")
	proto.RegisterType((*QueryLatestAttestationNonceRequest)(nil), "celestia.qgb.v1.QueryLatestAttestationNonceRequest")
	proto.RegisterType((*QueryLatestAttestationNonceResponse)(nil), "celestia.qgb.v1.QueryLatestAttestationNonceResponse")
	proto.RegisterType((*QueryEarliestAttestationNonceRequest)(nil), "celestia.qgb.v1.QueryEarliestAttestationNonceRequest")
	proto.RegisterType((*QueryEarliestAttestationNonceResponse)(nil), "celestia.qgb.v1.QueryEarliestAttestationNonceResponse")
	proto.RegisterType((*QueryLatestValsetRequestBeforeNonceRequest)(nil), "celestia.qgb.v1.QueryLatestValsetRequestBeforeNonceRequest")
	proto.RegisterType((*QueryLatestValsetRequestBeforeNonceResponse)(nil), "celestia.qgb.v1.QueryLatestValsetRequestBeforeNonceResponse")
	proto.RegisterType((*QueryLatestUnbondingHeightRequest)(nil), "celestia.qgb.v1.QueryLatestUnbondingHeightRequest")
	proto.RegisterType((*QueryLatestUnbondingHeightResponse)(nil), "celestia.qgb.v1.QueryLatestUnbondingHeightResponse")
	proto.RegisterType((*QueryLatestDataCommitmentRequest)(nil), "celestia.qgb.v1.QueryLatestDataCommitmentRequest")
	proto.RegisterType((*QueryLatestDataCommitmentResponse)(nil), "celestia.qgb.v1.QueryLatestDataCommitmentResponse")
	proto.RegisterType((*QueryDataCommitmentRangeForHeightRequest)(nil), "celestia.qgb.v1.QueryDataCommitmentRangeForHeightRequest")
	proto.RegisterType((*QueryDataCommitmentRangeForHeightResponse)(nil), "celestia.qgb.v1.QueryDataCommitmentRangeForHeightResponse")
	proto.RegisterType((*QueryEVMAddressRequest)(nil), "celestia.qgb.v1.QueryEVMAddressRequest")
	proto.RegisterType((*QueryEVMAddressResponse)(nil), "celestia.qgb.v1.QueryEVMAddressResponse")
}

func init() { proto.RegisterFile("celestia/qgb/v1/query.proto", fileDescriptor_c8535c57355a2b91) }

var fileDescriptor_c8535c57355a2b91 = []byte{
	// 910 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xcf, 0x8f, 0xdb, 0x44,
	0x14, 0xc7, 0x63, 0xd4, 0x46, 0xe2, 0x45, 0xea, 0x8f, 0x49, 0x9a, 0xed, 0xba, 0xc5, 0xbb, 0x75,
	0xb2, 0xe9, 0x96, 0x65, 0x3d, 0xda, 0x2c, 0x5d, 0x44, 0x5b, 0x0e, 0x1b, 0x28, 0x2a, 0x52, 0x81,
	0x12, 0x89, 0x1e, 0x38, 0xb0, 0x1a, 0x27, 0x53, 0xaf, 0x45, 0xec, 0x49, 0x6c, 0x27, 0x22, 0x02,
	0x2e, 0xfc, 0x05, 0x48, 0x1c, 0x39, 0x73, 0xe5, 0x84, 0xb8, 0x70, 0xe4, 0x52, 0xf5, 0x54, 0x89,
	0x0b, 0x27, 0x84, 0x76, 0xf9, 0x0f, 0xf8, 0x07, 0x50, 0xe6, 0x47, 0xd6, 0x71, 0x6c, 0x27, 0x59,
	0xf5, 0xe6, 0x99, 0xf7, 0xde, 0xf7, 0x7d, 0x9e, 0x33, 0xfe, 0x4e, 0xe0, 0x46, 0x87, 0xf6, 0x68,
	0x18, 0xb9, 0x04, 0x0f, 0x1c, 0x1b, 0x8f, 0xf6, 0xf0, 0x60, 0x48, 0x83, 0xb1, 0xd5, 0x0f, 0x58,
	0xc4, 0xd0, 0x65, 0x15, 0xb4, 0x06, 0x8e, 0x6d, 0x8d, 0xf6, 0xf4, 0x37, 0x92, 0xd9, 0x0e, 0xf5,
	0x69, 0xe8, 0x86, 0x22, 0x5f, 0x9f, 0x13, 0x8b, 0xc6, 0x7d, 0xaa, 0x82, 0x37, 0x1d, 0xc6, 0x9c,
	0x1e, 0xc5, 0xa4, 0xef, 0x62, 0xe2, 0xfb, 0x2c, 0x22, 0x91, 0xcb, 0x7c, 0x15, 0xad, 0x38, 0xcc,
	0x61, 0xfc, 0x11, 0x4f, 0x9e, 0xe4, 0xee, 0x7a, 0x87, 0x85, 0x1e, 0x0b, 0x8f, 0x44, 0x40, 0x2c,
	0x54, 0x48, 0xca, 0xf1, 0x95, 0x3d, 0x7c, 0x86, 0x89, 0x2f, 0xb1, 0xcd, 0x0a, 0xa0, 0xcf, 0x26,
	0x53, 0x3c, 0x21, 0x01, 0xf1, 0xc2, 0x36, 0x1d, 0x0c, 0x69, 0x18, 0x99, 0x8f, 0xa1, 0x3c, 0xb3,
	0x1b, 0xf6, 0x99, 0x1f, 0x52, 0x74, 0x17, 0x8a, 0x7d, 0xbe, 0x73, 0x5d, 0xdb, 0xd4, 0xb6, 0x4b,
	0xcd, 0x35, 0x2b, 0x31, 0xb4, 0x25, 0x0a, 0x5a, 0x17, 0x9e, 0xff, 0xbd, 0x51, 0x68, 0xcb, 0x64,
	0xf3, 0x3d, 0xd8, 0xe2, 0x6a, 0x87, 0x51, 0x44, 0x43, 0x31, 0x8a, 0x6c, 0xd4, 0x1a, 0x7f, 0xc2,
	0xfc, 0x0e, 0x95, 0x2b, 0x54, 0x81, 0x8b, 0xfe, 0x64, 0xcd, 0xe5, 0x2f, 0xb4, 0xc5, 0xc2, 0x1c,
	0x43, 0x63, 0x51, 0xb9, 0xe4, 0xfb, 0x14, 0x4a, 0xe4, 0x2c, 0x49, 0x42, 0x56, 0x2c, 0x31, 0xbd,
	0xa5, 0xa6, 0xb7, 0x0e, 0xfd, 0x71, 0x6b, 0xed, 0xc5, 0xaf, 0xbb, 0xe5, 0x79, 0xc5, 0x8f, 0xda,
	0x71, 0x05, 0xb3, 0x0e, 0x26, 0x6f, 0xfd, 0x98, 0x4c, 0xf6, 0x62, 0xe9, 0x71, 0x6c, 0xf3, 0x3e,
	0xd4, 0x72, 0xb3, 0x24, 0x5d, 0xfa, 0x74, 0x0d, 0xa8, 0xf3, 0xe2, 0x87, 0x24, 0xe8, 0xb9, 0x39,
	0x4d, 0xd4, 0x4b, 0xcc, 0xce, 0xcb, 0x6d, 0xd3, 0x82, 0x37, 0x63, 0x8c, 0x4f, 0x49, 0x2f, 0xa4,
	0x91, 0x7a, 0x8b, 0xf4, 0x19, 0x0b, 0xe8, 0x12, 0x3f, 0xc4, 0x97, 0xb0, 0xb3, 0x94, 0x86, 0x04,
	0xc1, 0x50, 0x1c, 0xf1, 0x9c, 0xcc, 0xd3, 0x22, 0x25, 0x64, 0x9a, 0x59, 0x83, 0x5b, 0x31, 0xfd,
	0xcf, 0x7d, 0x9b, 0xf9, 0x5d, 0xd7, 0x77, 0x1e, 0x51, 0xd7, 0x39, 0x56, 0x8d, 0xcc, 0x07, 0x33,
	0x3f, 0xc9, 0x5c, 0x92, 0xec, 0x5d, 0x85, 0xe2, 0x31, 0xdf, 0x91, 0x13, 0xc8, 0x95, 0x69, 0xc2,
	0x66, 0xac, 0xfa, 0x03, 0x12, 0x91, 0xf7, 0x99, 0xe7, 0xb9, 0x91, 0x47, 0xfd, 0x69, 0x07, 0x6f,
	0x06, 0x23, 0x99, 0x23, 0x1b, 0x3c, 0x82, 0xcb, 0x5d, 0x12, 0x91, 0xa3, 0xce, 0x34, 0x24, 0xa7,
	0xdc, 0x98, 0x9b, 0x32, 0xa1, 0x70, 0xa9, 0x3b, 0xb3, 0x36, 0x5b, 0xb0, 0xcd, 0xdb, 0x25, 0xd2,
	0x88, 0xef, 0xd0, 0x0f, 0x59, 0x30, 0x33, 0x7c, 0xe6, 0x58, 0x43, 0xb8, 0xb3, 0x84, 0xc6, 0x2b,
	0x47, 0x7f, 0x08, 0x55, 0x71, 0x26, 0x9f, 0x7e, 0x7c, 0xd8, 0xed, 0x06, 0x34, 0x54, 0x06, 0x82,
	0x76, 0xe0, 0xea, 0x88, 0xf4, 0xdc, 0x2e, 0x89, 0x58, 0x70, 0x44, 0x44, 0x8c, 0x77, 0x79, 0xbd,
	0x7d, 0x65, 0x1a, 0x90, 0x35, 0xe6, 0x3d, 0x58, 0x9b, 0x93, 0x91, 0xac, 0x1b, 0x50, 0xa2, 0x23,
	0x2f, 0xa1, 0x00, 0x74, 0xe4, 0xc9, 0xc4, 0xe6, 0x7f, 0x25, 0xb8, 0xc8, 0x8b, 0xd1, 0x57, 0x50,
	0x14, 0xee, 0x83, 0x6a, 0x73, 0x73, 0xcc, 0x5b, 0x9c, 0x5e, 0xcf, 0x4f, 0x12, 0xfd, 0xcd, 0xea,
	0xf7, 0x7f, 0xfe, 0xfb, 0xe3, 0x6b, 0x57, 0xd0, 0x25, 0xe5, 0xd2, 0xc2, 0xd2, 0xd0, 0xef, 0x1a,
	0xac, 0x67, 0xfa, 0x11, 0x3a, 0x48, 0xd7, 0x5e, 0xe4, 0x7f, 0xfa, 0x3b, 0x2b, 0xd7, 0x49, 0xcc,
	0x5d, 0x8e, 0x79, 0x1b, 0x6d, 0x29, 0xcc, 0x98, 0x89, 0x85, 0x38, 0x10, 0x45, 0x21, 0xfe, 0x86,
	0x7f, 0xc7, 0xdf, 0xa1, 0x5f, 0x34, 0xa8, 0xa6, 0x9b, 0x15, 0xda, 0x4f, 0x47, 0xc8, 0x35, 0x40,
	0xfd, 0xed, 0xd5, 0x8a, 0x24, 0xf4, 0x1d, 0x0e, 0x5d, 0x43, 0xb7, 0x52, 0xa1, 0x39, 0x2a, 0xee,
	0x71, 0x09, 0xf4, 0x9b, 0x06, 0xd7, 0xb3, 0x8c, 0x0f, 0xdd, 0x4d, 0xef, 0xbe, 0xc0, 0x50, 0xf5,
	0x83, 0x55, 0xcb, 0x24, 0xf6, 0x0e, 0xc7, 0xde, 0x42, 0xb5, 0x1c, 0x6c, 0x2a, 0x45, 0xd0, 0x0b,
	0x0d, 0x8c, 0x7c, 0xbb, 0x44, 0xf7, 0xf3, 0x5e, 0xde, 0x02, 0xa3, 0xd6, 0x1f, 0x9c, 0xaf, 0x38,
	0xeb, 0xd8, 0x08, 0x23, 0x56, 0x07, 0x06, 0xdb, 0xbc, 0x66, 0x7a, 0x6c, 0x7e, 0xd2, 0xe0, 0x5a,
	0xaa, 0xed, 0xa2, 0x66, 0x1e, 0x46, 0xba, 0x91, 0xeb, 0xfb, 0x2b, 0xd5, 0x48, 0xe2, 0x75, 0x4e,
	0x5c, 0x46, 0x57, 0x15, 0xf1, 0x50, 0x25, 0xa2, 0x3f, 0x34, 0xb8, 0x99, 0xe7, 0x7f, 0xe8, 0xdd,
	0xf4, 0x86, 0x4b, 0xf8, 0xae, 0x7e, 0xef, 0x3c, 0xa5, 0x12, 0xf9, 0x2d, 0x8e, 0xdc, 0x40, 0x75,
	0x85, 0x9c, 0x30, 0x5f, 0x1c, 0x4c, 0xea, 0xb0, 0x70, 0x72, 0xf4, 0xb3, 0x06, 0x95, 0xb4, 0x8b,
	0x07, 0xed, 0xe5, 0xbd, 0xae, 0xd4, 0x8b, 0x4c, 0x6f, 0xae, 0x52, 0x22, 0x69, 0x1b, 0x9c, 0x76,
	0x13, 0x19, 0x59, 0xb4, 0xf2, 0x8b, 0xfc, 0x16, 0xe0, 0xcc, 0xae, 0xd1, 0xed, 0x8c, 0x6f, 0x29,
	0x79, 0x2f, 0xe8, 0xdb, 0x8b, 0x13, 0x25, 0xc8, 0x0d, 0x0e, 0x72, 0x0d, 0x95, 0x15, 0x48, 0xec,
	0x1e, 0x68, 0x3d, 0x79, 0x7e, 0x62, 0x68, 0x2f, 0x4f, 0x0c, 0xed, 0x9f, 0x13, 0x43, 0xfb, 0xe1,
	0xd4, 0x28, 0xbc, 0x3c, 0x35, 0x0a, 0x7f, 0x9d, 0x1a, 0x85, 0x2f, 0x0e, 0x1c, 0x37, 0x3a, 0x1e,
	0xda, 0x56, 0x87, 0x79, 0x58, 0xb5, 0x62, 0x81, 0x33, 0x7d, 0xde, 0x25, 0xfd, 0x3e, 0xfe, 0x1a,
	0xdb, 0x3d, 0x66, 0x87, 0x51, 0x40, 0x89, 0x27, 0xfe, 0x77, 0xdb, 0x45, 0xfe, 0xef, 0x70, 0xff,
	0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x42, 0x6c, 0x12, 0x89, 0xe4, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the current parameters for the blobstream module
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// AttestationRequestByNonce queries attestation request by nonce.
	// Returns nil if not found.
	AttestationRequestByNonce(ctx context.Context, in *QueryAttestationRequestByNonceRequest, opts ...grpc.CallOption) (*QueryAttestationRequestByNonceResponse, error)
	// LatestAttestationNonce queries latest attestation nonce.
	LatestAttestationNonce(ctx context.Context, in *QueryLatestAttestationNonceRequest, opts ...grpc.CallOption) (*QueryLatestAttestationNonceResponse, error)
	// EarliestAttestationNonce queries the earliest attestation nonce.
	EarliestAttestationNonce(ctx context.Context, in *QueryEarliestAttestationNonceRequest, opts ...grpc.CallOption) (*QueryEarliestAttestationNonceResponse, error)
	// LatestValsetRequestBeforeNonce Queries latest Valset request before nonce.
	// And, even if the current nonce is a valset, it will return the previous
	// one.
	// If the provided nonce is 1, it will return an error, because, there is
	// no valset before nonce 1.
	LatestValsetRequestBeforeNonce(ctx context.Context, in *QueryLatestValsetRequestBeforeNonceRequest, opts ...grpc.CallOption) (*QueryLatestValsetRequestBeforeNonceResponse, error)
	// LatestUnbondingHeight returns the latest unbonding height
	LatestUnbondingHeight(ctx context.Context, in *QueryLatestUnbondingHeightRequest, opts ...grpc.CallOption) (*QueryLatestUnbondingHeightResponse, error)
	// DataCommitmentRangeForHeight returns the data commitment window
	// that includes the provided height
	DataCommitmentRangeForHeight(ctx context.Context, in *QueryDataCommitmentRangeForHeightRequest, opts ...grpc.CallOption) (*QueryDataCommitmentRangeForHeightResponse, error)
	// LatestDataCommitment returns the latest data commitment in store
	LatestDataCommitment(ctx context.Context, in *QueryLatestDataCommitmentRequest, opts ...grpc.CallOption) (*QueryLatestDataCommitmentResponse, error)
	// EVMAddress returns the EVM address associated with the provided validator address
	EVMAddress(ctx context.Context, in *QueryEVMAddressRequest, opts ...grpc.CallOption) (*QueryEVMAddressResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/celestia.qgb.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AttestationRequestByNonce(ctx context.Context, in *QueryAttestationRequestByNonceRequest, opts ...grpc.CallOption) (*QueryAttestationRequestByNonceResponse, error) {
	out := new(QueryAttestationRequestByNonceResponse)
	err := c.cc.Invoke(ctx, "/celestia.qgb.v1.Query/AttestationRequestByNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestAttestationNonce(ctx context.Context, in *QueryLatestAttestationNonceRequest, opts ...grpc.CallOption) (*QueryLatestAttestationNonceResponse, error) {
	out := new(QueryLatestAttestationNonceResponse)
	err := c.cc.Invoke(ctx, "/celestia.qgb.v1.Query/LatestAttestationNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EarliestAttestationNonce(ctx context.Context, in *QueryEarliestAttestationNonceRequest, opts ...grpc.CallOption) (*QueryEarliestAttestationNonceResponse, error) {
	out := new(QueryEarliestAttestationNonceResponse)
	err := c.cc.Invoke(ctx, "/celestia.qgb.v1.Query/EarliestAttestationNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestValsetRequestBeforeNonce(ctx context.Context, in *QueryLatestValsetRequestBeforeNonceRequest, opts ...grpc.CallOption) (*QueryLatestValsetRequestBeforeNonceResponse, error) {
	out := new(QueryLatestValsetRequestBeforeNonceResponse)
	err := c.cc.Invoke(ctx, "/celestia.qgb.v1.Query/LatestValsetRequestBeforeNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestUnbondingHeight(ctx context.Context, in *QueryLatestUnbondingHeightRequest, opts ...grpc.CallOption) (*QueryLatestUnbondingHeightResponse, error) {
	out := new(QueryLatestUnbondingHeightResponse)
	err := c.cc.Invoke(ctx, "/celestia.qgb.v1.Query/LatestUnbondingHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DataCommitmentRangeForHeight(ctx context.Context, in *QueryDataCommitmentRangeForHeightRequest, opts ...grpc.CallOption) (*QueryDataCommitmentRangeForHeightResponse, error) {
	out := new(QueryDataCommitmentRangeForHeightResponse)
	err := c.cc.Invoke(ctx, "/celestia.qgb.v1.Query/DataCommitmentRangeForHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestDataCommitment(ctx context.Context, in *QueryLatestDataCommitmentRequest, opts ...grpc.CallOption) (*QueryLatestDataCommitmentResponse, error) {
	out := new(QueryLatestDataCommitmentResponse)
	err := c.cc.Invoke(ctx, "/celestia.qgb.v1.Query/LatestDataCommitment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EVMAddress(ctx context.Context, in *QueryEVMAddressRequest, opts ...grpc.CallOption) (*QueryEVMAddressResponse, error) {
	out := new(QueryEVMAddressResponse)
	err := c.cc.Invoke(ctx, "/celestia.qgb.v1.Query/EVMAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the current parameters for the blobstream module
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// AttestationRequestByNonce queries attestation request by nonce.
	// Returns nil if not found.
	AttestationRequestByNonce(context.Context, *QueryAttestationRequestByNonceRequest) (*QueryAttestationRequestByNonceResponse, error)
	// LatestAttestationNonce queries latest attestation nonce.
	LatestAttestationNonce(context.Context, *QueryLatestAttestationNonceRequest) (*QueryLatestAttestationNonceResponse, error)
	// EarliestAttestationNonce queries the earliest attestation nonce.
	EarliestAttestationNonce(context.Context, *QueryEarliestAttestationNonceRequest) (*QueryEarliestAttestationNonceResponse, error)
	// LatestValsetRequestBeforeNonce Queries latest Valset request before nonce.
	// And, even if the current nonce is a valset, it will return the previous
	// one.
	// If the provided nonce is 1, it will return an error, because, there is
	// no valset before nonce 1.
	LatestValsetRequestBeforeNonce(context.Context, *QueryLatestValsetRequestBeforeNonceRequest) (*QueryLatestValsetRequestBeforeNonceResponse, error)
	// LatestUnbondingHeight returns the latest unbonding height
	LatestUnbondingHeight(context.Context, *QueryLatestUnbondingHeightRequest) (*QueryLatestUnbondingHeightResponse, error)
	// DataCommitmentRangeForHeight returns the data commitment window
	// that includes the provided height
	DataCommitmentRangeForHeight(context.Context, *QueryDataCommitmentRangeForHeightRequest) (*QueryDataCommitmentRangeForHeightResponse, error)
	// LatestDataCommitment returns the latest data commitment in store
	LatestDataCommitment(context.Context, *QueryLatestDataCommitmentRequest) (*QueryLatestDataCommitmentResponse, error)
	// EVMAddress returns the EVM address associated with the provided validator address
	EVMAddress(context.Context, *QueryEVMAddressRequest) (*QueryEVMAddressResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) AttestationRequestByNonce(ctx context.Context, req *QueryAttestationRequestByNonceRequest) (*QueryAttestationRequestByNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttestationRequestByNonce not implemented")
}
func (*UnimplementedQueryServer) LatestAttestationNonce(ctx context.Context, req *QueryLatestAttestationNonceRequest) (*QueryLatestAttestationNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestAttestationNonce not implemented")
}
func (*UnimplementedQueryServer) EarliestAttestationNonce(ctx context.Context, req *QueryEarliestAttestationNonceRequest) (*QueryEarliestAttestationNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EarliestAttestationNonce not implemented")
}
func (*UnimplementedQueryServer) LatestValsetRequestBeforeNonce(ctx context.Context, req *QueryLatestValsetRequestBeforeNonceRequest) (*QueryLatestValsetRequestBeforeNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestValsetRequestBeforeNonce not implemented")
}
func (*UnimplementedQueryServer) LatestUnbondingHeight(ctx context.Context, req *QueryLatestUnbondingHeightRequest) (*QueryLatestUnbondingHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestUnbondingHeight not implemented")
}
func (*UnimplementedQueryServer) DataCommitmentRangeForHeight(ctx context.Context, req *QueryDataCommitmentRangeForHeightRequest) (*QueryDataCommitmentRangeForHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataCommitmentRangeForHeight not implemented")
}
func (*UnimplementedQueryServer) LatestDataCommitment(ctx context.Context, req *QueryLatestDataCommitmentRequest) (*QueryLatestDataCommitmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestDataCommitment not implemented")
}
func (*UnimplementedQueryServer) EVMAddress(ctx context.Context, req *QueryEVMAddressRequest) (*QueryEVMAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EVMAddress not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celestia.qgb.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AttestationRequestByNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAttestationRequestByNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AttestationRequestByNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celestia.qgb.v1.Query/AttestationRequestByNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AttestationRequestByNonce(ctx, req.(*QueryAttestationRequestByNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestAttestationNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestAttestationNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestAttestationNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celestia.qgb.v1.Query/LatestAttestationNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestAttestationNonce(ctx, req.(*QueryLatestAttestationNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EarliestAttestationNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEarliestAttestationNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EarliestAttestationNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celestia.qgb.v1.Query/EarliestAttestationNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EarliestAttestationNonce(ctx, req.(*QueryEarliestAttestationNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestValsetRequestBeforeNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestValsetRequestBeforeNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestValsetRequestBeforeNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celestia.qgb.v1.Query/LatestValsetRequestBeforeNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestValsetRequestBeforeNonce(ctx, req.(*QueryLatestValsetRequestBeforeNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestUnbondingHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestUnbondingHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestUnbondingHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celestia.qgb.v1.Query/LatestUnbondingHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestUnbondingHeight(ctx, req.(*QueryLatestUnbondingHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DataCommitmentRangeForHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDataCommitmentRangeForHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DataCommitmentRangeForHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celestia.qgb.v1.Query/DataCommitmentRangeForHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DataCommitmentRangeForHeight(ctx, req.(*QueryDataCommitmentRangeForHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestDataCommitment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestDataCommitmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestDataCommitment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celestia.qgb.v1.Query/LatestDataCommitment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestDataCommitment(ctx, req.(*QueryLatestDataCommitmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EVMAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEVMAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EVMAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celestia.qgb.v1.Query/EVMAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EVMAddress(ctx, req.(*QueryEVMAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "celestia.qgb.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "AttestationRequestByNonce",
			Handler:    _Query_AttestationRequestByNonce_Handler,
		},
		{
			MethodName: "LatestAttestationNonce",
			Handler:    _Query_LatestAttestationNonce_Handler,
		},
		{
			MethodName: "EarliestAttestationNonce",
			Handler:    _Query_EarliestAttestationNonce_Handler,
		},
		{
			MethodName: "LatestValsetRequestBeforeNonce",
			Handler:    _Query_LatestValsetRequestBeforeNonce_Handler,
		},
		{
			MethodName: "LatestUnbondingHeight",
			Handler:    _Query_LatestUnbondingHeight_Handler,
		},
		{
			MethodName: "DataCommitmentRangeForHeight",
			Handler:    _Query_DataCommitmentRangeForHeight_Handler,
		},
		{
			MethodName: "LatestDataCommitment",
			Handler:    _Query_LatestDataCommitment_Handler,
		},
		{
			MethodName: "EVMAddress",
			Handler:    _Query_EVMAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "celestia/qgb/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAttestationRequestByNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAttestationRequestByNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAttestationRequestByNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAttestationRequestByNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAttestationRequestByNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAttestationRequestByNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Attestation != nil {
		{
			size, err := m.Attestation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestAttestationNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestAttestationNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestAttestationNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLatestAttestationNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestAttestationNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestAttestationNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryEarliestAttestationNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEarliestAttestationNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEarliestAttestationNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryEarliestAttestationNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEarliestAttestationNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEarliestAttestationNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestValsetRequestBeforeNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestValsetRequestBeforeNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestValsetRequestBeforeNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestValsetRequestBeforeNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestValsetRequestBeforeNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestValsetRequestBeforeNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Valset != nil {
		{
			size, err := m.Valset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestUnbondingHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestUnbondingHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestUnbondingHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLatestUnbondingHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestUnbondingHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestUnbondingHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestDataCommitmentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestDataCommitmentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestDataCommitmentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLatestDataCommitmentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestDataCommitmentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestDataCommitmentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataCommitment != nil {
		{
			size, err := m.DataCommitment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataCommitmentRangeForHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataCommitmentRangeForHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataCommitmentRangeForHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataCommitmentRangeForHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataCommitmentRangeForHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataCommitmentRangeForHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataCommitment != nil {
		{
			size, err := m.DataCommitment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEVMAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEVMAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEVMAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEVMAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEVMAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEVMAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EvmAddress) > 0 {
		i -= len(m.EvmAddress)
		copy(dAtA[i:], m.EvmAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EvmAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAttestationRequestByNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryAttestationRequestByNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Attestation != nil {
		l = m.Attestation.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLatestAttestationNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLatestAttestationNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryEarliestAttestationNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryEarliestAttestationNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryLatestValsetRequestBeforeNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryLatestValsetRequestBeforeNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valset != nil {
		l = m.Valset.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLatestUnbondingHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLatestUnbondingHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QueryLatestDataCommitmentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLatestDataCommitmentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataCommitment != nil {
		l = m.DataCommitment.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDataCommitmentRangeForHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QueryDataCommitmentRangeForHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataCommitment != nil {
		l = m.DataCommitment.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEVMAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEVMAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EvmAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAttestationRequestByNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAttestationRequestByNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAttestationRequestByNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAttestationRequestByNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAttestationRequestByNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAttestationRequestByNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attestation == nil {
				m.Attestation = &types.Any{}
			}
			if err := m.Attestation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestAttestationNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestAttestationNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestAttestationNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestAttestationNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestAttestationNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestAttestationNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEarliestAttestationNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEarliestAttestationNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEarliestAttestationNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEarliestAttestationNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEarliestAttestationNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEarliestAttestationNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestValsetRequestBeforeNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestValsetRequestBeforeNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestValsetRequestBeforeNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestValsetRequestBeforeNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestValsetRequestBeforeNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestValsetRequestBeforeNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Valset == nil {
				m.Valset = &Valset{}
			}
			if err := m.Valset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestUnbondingHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestUnbondingHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestUnbondingHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestUnbondingHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestUnbondingHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestUnbondingHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestDataCommitmentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestDataCommitmentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestDataCommitmentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestDataCommitmentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestDataCommitmentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestDataCommitmentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataCommitment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataCommitment == nil {
				m.DataCommitment = &DataCommitment{}
			}
			if err := m.DataCommitment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataCommitmentRangeForHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataCommitmentRangeForHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataCommitmentRangeForHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataCommitmentRangeForHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataCommitmentRangeForHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataCommitmentRangeForHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataCommitment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataCommitment == nil {
				m.DataCommitment = &DataCommitment{}
			}
			if err := m.DataCommitment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEVMAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEVMAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEVMAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEVMAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEVMAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEVMAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvmAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvmAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
