// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: celestia/fibre/v1/event.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventDepositToEscrow is emitted when a deposit is made to an escrow account.
type EventDepositToEscrow struct {
	Signer string     `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Amount types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
}

func (m *EventDepositToEscrow) Reset()         { *m = EventDepositToEscrow{} }
func (m *EventDepositToEscrow) String() string { return proto.CompactTextString(m) }
func (*EventDepositToEscrow) ProtoMessage()    {}
func (*EventDepositToEscrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_02fd497617eb1003, []int{0}
}
func (m *EventDepositToEscrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDepositToEscrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDepositToEscrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDepositToEscrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDepositToEscrow.Merge(m, src)
}
func (m *EventDepositToEscrow) XXX_Size() int {
	return m.Size()
}
func (m *EventDepositToEscrow) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDepositToEscrow.DiscardUnknown(m)
}

var xxx_messageInfo_EventDepositToEscrow proto.InternalMessageInfo

func (m *EventDepositToEscrow) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *EventDepositToEscrow) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

// EventWithdrawFromEscrowRequest is emitted when a withdrawal is requested from an escrow account.
type EventWithdrawFromEscrowRequest struct {
	Signer      string     `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Amount      types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
	AvailableAt time.Time  `protobuf:"bytes,3,opt,name=available_at,json=availableAt,proto3,stdtime" json:"available_at"`
}

func (m *EventWithdrawFromEscrowRequest) Reset()         { *m = EventWithdrawFromEscrowRequest{} }
func (m *EventWithdrawFromEscrowRequest) String() string { return proto.CompactTextString(m) }
func (*EventWithdrawFromEscrowRequest) ProtoMessage()    {}
func (*EventWithdrawFromEscrowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_02fd497617eb1003, []int{1}
}
func (m *EventWithdrawFromEscrowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventWithdrawFromEscrowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventWithdrawFromEscrowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventWithdrawFromEscrowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventWithdrawFromEscrowRequest.Merge(m, src)
}
func (m *EventWithdrawFromEscrowRequest) XXX_Size() int {
	return m.Size()
}
func (m *EventWithdrawFromEscrowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventWithdrawFromEscrowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventWithdrawFromEscrowRequest proto.InternalMessageInfo

func (m *EventWithdrawFromEscrowRequest) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *EventWithdrawFromEscrowRequest) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *EventWithdrawFromEscrowRequest) GetAvailableAt() time.Time {
	if m != nil {
		return m.AvailableAt
	}
	return time.Time{}
}

// EventWithdrawFromEscrowExecuted is emitted when a withdrawal is processed.
type EventWithdrawFromEscrowExecuted struct {
	Signer string     `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Amount types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
}

func (m *EventWithdrawFromEscrowExecuted) Reset()         { *m = EventWithdrawFromEscrowExecuted{} }
func (m *EventWithdrawFromEscrowExecuted) String() string { return proto.CompactTextString(m) }
func (*EventWithdrawFromEscrowExecuted) ProtoMessage()    {}
func (*EventWithdrawFromEscrowExecuted) Descriptor() ([]byte, []int) {
	return fileDescriptor_02fd497617eb1003, []int{2}
}
func (m *EventWithdrawFromEscrowExecuted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventWithdrawFromEscrowExecuted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventWithdrawFromEscrowExecuted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventWithdrawFromEscrowExecuted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventWithdrawFromEscrowExecuted.Merge(m, src)
}
func (m *EventWithdrawFromEscrowExecuted) XXX_Size() int {
	return m.Size()
}
func (m *EventWithdrawFromEscrowExecuted) XXX_DiscardUnknown() {
	xxx_messageInfo_EventWithdrawFromEscrowExecuted.DiscardUnknown(m)
}

var xxx_messageInfo_EventWithdrawFromEscrowExecuted proto.InternalMessageInfo

func (m *EventWithdrawFromEscrowExecuted) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *EventWithdrawFromEscrowExecuted) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

// EventPayForFibre is emitted when a payment for fibre is processed.
type EventPayForFibre struct {
	Signer     string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Namespace  []byte `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Commitment []byte `protobuf:"bytes,3,opt,name=commitment,proto3" json:"commitment,omitempty"`
}

func (m *EventPayForFibre) Reset()         { *m = EventPayForFibre{} }
func (m *EventPayForFibre) String() string { return proto.CompactTextString(m) }
func (*EventPayForFibre) ProtoMessage()    {}
func (*EventPayForFibre) Descriptor() ([]byte, []int) {
	return fileDescriptor_02fd497617eb1003, []int{3}
}
func (m *EventPayForFibre) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPayForFibre) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPayForFibre.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPayForFibre) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPayForFibre.Merge(m, src)
}
func (m *EventPayForFibre) XXX_Size() int {
	return m.Size()
}
func (m *EventPayForFibre) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPayForFibre.DiscardUnknown(m)
}

var xxx_messageInfo_EventPayForFibre proto.InternalMessageInfo

func (m *EventPayForFibre) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *EventPayForFibre) GetNamespace() []byte {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *EventPayForFibre) GetCommitment() []byte {
	if m != nil {
		return m.Commitment
	}
	return nil
}

// EventPaymentPromiseTimeout is emitted when a PaymentPromise timeout is processed.
type EventPaymentPromiseTimeout struct {
	Processor          string `protobuf:"bytes,1,opt,name=processor,proto3" json:"processor,omitempty"`
	EscrowSigner       string `protobuf:"bytes,2,opt,name=escrow_signer,json=escrowSigner,proto3" json:"escrow_signer,omitempty"`
	PaymentPromiseHash []byte `protobuf:"bytes,3,opt,name=payment_promise_hash,json=paymentPromiseHash,proto3" json:"payment_promise_hash,omitempty"`
}

func (m *EventPaymentPromiseTimeout) Reset()         { *m = EventPaymentPromiseTimeout{} }
func (m *EventPaymentPromiseTimeout) String() string { return proto.CompactTextString(m) }
func (*EventPaymentPromiseTimeout) ProtoMessage()    {}
func (*EventPaymentPromiseTimeout) Descriptor() ([]byte, []int) {
	return fileDescriptor_02fd497617eb1003, []int{4}
}
func (m *EventPaymentPromiseTimeout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPaymentPromiseTimeout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPaymentPromiseTimeout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPaymentPromiseTimeout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPaymentPromiseTimeout.Merge(m, src)
}
func (m *EventPaymentPromiseTimeout) XXX_Size() int {
	return m.Size()
}
func (m *EventPaymentPromiseTimeout) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPaymentPromiseTimeout.DiscardUnknown(m)
}

var xxx_messageInfo_EventPaymentPromiseTimeout proto.InternalMessageInfo

func (m *EventPaymentPromiseTimeout) GetProcessor() string {
	if m != nil {
		return m.Processor
	}
	return ""
}

func (m *EventPaymentPromiseTimeout) GetEscrowSigner() string {
	if m != nil {
		return m.EscrowSigner
	}
	return ""
}

func (m *EventPaymentPromiseTimeout) GetPaymentPromiseHash() []byte {
	if m != nil {
		return m.PaymentPromiseHash
	}
	return nil
}

func init() {
	proto.RegisterType((*EventDepositToEscrow)(nil), "celestia.fibre.v1.EventDepositToEscrow")
	proto.RegisterType((*EventWithdrawFromEscrowRequest)(nil), "celestia.fibre.v1.EventWithdrawFromEscrowRequest")
	proto.RegisterType((*EventWithdrawFromEscrowExecuted)(nil), "celestia.fibre.v1.EventWithdrawFromEscrowExecuted")
	proto.RegisterType((*EventPayForFibre)(nil), "celestia.fibre.v1.EventPayForFibre")
	proto.RegisterType((*EventPaymentPromiseTimeout)(nil), "celestia.fibre.v1.EventPaymentPromiseTimeout")
}

func init() { proto.RegisterFile("celestia/fibre/v1/event.proto", fileDescriptor_02fd497617eb1003) }

var fileDescriptor_02fd497617eb1003 = []byte{
	// 512 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0xb1, 0x6f, 0x13, 0x3f,
	0x14, 0xc7, 0xe3, 0xfe, 0x7e, 0x8a, 0x88, 0x1b, 0x24, 0x38, 0x65, 0x48, 0x23, 0xb8, 0x54, 0x99,
	0xba, 0xf4, 0xae, 0x01, 0x09, 0x26, 0x86, 0x06, 0x12, 0x90, 0x58, 0xaa, 0x6b, 0x25, 0x24, 0x96,
	0xc8, 0x77, 0x79, 0xbd, 0x58, 0x8a, 0xef, 0x19, 0xdb, 0x97, 0xb6, 0x23, 0xcc, 0x0c, 0xfd, 0x63,
	0xf8, 0x17, 0x90, 0x3a, 0x56, 0x88, 0x81, 0x09, 0x50, 0xf2, 0x8f, 0x20, 0x9f, 0x7d, 0x2d, 0x0c,
	0xa8, 0x12, 0x43, 0x37, 0xfb, 0x7d, 0xbf, 0xef, 0xfc, 0x79, 0xef, 0xd9, 0x47, 0x1f, 0x66, 0xb0,
	0x00, 0x6d, 0x38, 0x8b, 0x8f, 0x79, 0xaa, 0x20, 0x5e, 0x0e, 0x63, 0x58, 0x42, 0x61, 0x22, 0xa9,
	0xd0, 0x60, 0x70, 0xbf, 0x96, 0xa3, 0x4a, 0x8e, 0x96, 0xc3, 0x5e, 0x27, 0xc7, 0x1c, 0x2b, 0x35,
	0xb6, 0x2b, 0x67, 0xec, 0xf5, 0x73, 0xc4, 0x7c, 0x01, 0x71, 0xb5, 0x4b, 0xcb, 0xe3, 0xd8, 0x70,
	0x01, 0xda, 0x30, 0x21, 0xbd, 0x21, 0xcc, 0x50, 0x0b, 0xd4, 0x71, 0xca, 0xb4, 0x3d, 0x25, 0x05,
	0xc3, 0x86, 0x71, 0x86, 0xbc, 0xf0, 0xfa, 0x96, 0xd3, 0xa7, 0xee, 0xcb, 0x6e, 0xe3, 0xa4, 0xc1,
	0x7b, 0x42, 0x3b, 0x63, 0x0b, 0xf5, 0x02, 0x24, 0x6a, 0x6e, 0x8e, 0x70, 0xac, 0x33, 0x85, 0x27,
	0xc1, 0x1e, 0x6d, 0x6a, 0x9e, 0x17, 0xa0, 0xba, 0x64, 0x9b, 0xec, 0xb4, 0x46, 0xdd, 0x2f, 0x9f,
	0x76, 0x3b, 0x3e, 0x75, 0x7f, 0x36, 0x53, 0xa0, 0xf5, 0xa1, 0x51, 0xbc, 0xc8, 0x13, 0xef, 0x0b,
	0x9e, 0xd2, 0x26, 0x13, 0x58, 0x16, 0xa6, 0xbb, 0xb1, 0x4d, 0x76, 0x36, 0x1f, 0x6d, 0x45, 0xde,
	0x6e, 0xb1, 0x22, 0x8f, 0x15, 0x3d, 0x47, 0x5e, 0x8c, 0xfe, 0xbf, 0xf8, 0xde, 0x6f, 0x24, 0xde,
	0x3e, 0xf8, 0x4a, 0x68, 0x58, 0x31, 0xbc, 0xe1, 0x66, 0x3e, 0x53, 0xec, 0x64, 0xa2, 0x50, 0x38,
	0x8c, 0x04, 0xde, 0x95, 0xa0, 0xcd, 0x2d, 0xd2, 0x04, 0x2f, 0x69, 0x9b, 0x2d, 0x19, 0x5f, 0xb0,
	0x74, 0x01, 0x53, 0x66, 0xba, 0xff, 0x55, 0xe9, 0xbd, 0xc8, 0x0d, 0x21, 0xaa, 0x87, 0x10, 0x1d,
	0xd5, 0x43, 0x18, 0xdd, 0xb1, 0xf9, 0xe7, 0x3f, 0xfa, 0x24, 0xd9, 0xbc, 0xca, 0xdc, 0x37, 0x83,
	0x8f, 0x84, 0xf6, 0xff, 0x52, 0xd6, 0xf8, 0x14, 0xb2, 0xd2, 0xc0, 0xec, 0x36, 0xbb, 0xfc, 0x81,
	0xd0, 0x7b, 0x15, 0xce, 0x01, 0x3b, 0x9b, 0xa0, 0x9a, 0xd8, 0x3b, 0xf7, 0x0f, 0xe7, 0x3f, 0xa0,
	0xad, 0x82, 0x09, 0xd0, 0x92, 0x65, 0x50, 0x21, 0xb4, 0x93, 0xeb, 0x40, 0x10, 0x52, 0x9a, 0xa1,
	0x10, 0xdc, 0x08, 0x28, 0x5c, 0xeb, 0xda, 0xc9, 0x6f, 0x91, 0xc1, 0x67, 0x42, 0x7b, 0x35, 0x84,
	0x0d, 0x1c, 0x28, 0x14, 0x5c, 0x83, 0xed, 0x25, 0x96, 0x26, 0x78, 0x42, 0x5b, 0x52, 0x61, 0x06,
	0x5a, 0xe3, 0xcd, 0x44, 0xd7, 0xd6, 0xe0, 0x19, 0xbd, 0x0b, 0x55, 0x63, 0xa7, 0xbe, 0x9a, 0x8d,
	0x1b, 0x72, 0xdb, 0xce, 0x7e, 0xe8, 0x6a, 0xda, 0xa3, 0x1d, 0xe9, 0x78, 0xec, 0x13, 0xb1, 0x40,
	0xd3, 0x39, 0xd3, 0x73, 0xcf, 0x1f, 0xc8, 0x3f, 0x58, 0x5f, 0x31, 0x3d, 0x1f, 0xbd, 0xbe, 0x58,
	0x85, 0xe4, 0x72, 0x15, 0x92, 0x9f, 0xab, 0x90, 0x9c, 0xaf, 0xc3, 0xc6, 0xe5, 0x3a, 0x6c, 0x7c,
	0x5b, 0x87, 0x8d, 0xb7, 0xc3, 0x9c, 0x9b, 0x79, 0x99, 0x46, 0x19, 0x8a, 0xb8, 0x7e, 0xe0, 0xa8,
	0xf2, 0xab, 0xf5, 0x2e, 0x93, 0x32, 0x3e, 0xf5, 0x7f, 0x04, 0x73, 0x26, 0x41, 0xa7, 0xcd, 0xea,
	0x4e, 0x3d, 0xfe, 0x15, 0x00, 0x00, 0xff, 0xff, 0x52, 0xb7, 0xa0, 0xbc, 0x30, 0x04, 0x00, 0x00,
}

func (m *EventDepositToEscrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDepositToEscrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDepositToEscrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventWithdrawFromEscrowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventWithdrawFromEscrowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventWithdrawFromEscrowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.AvailableAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.AvailableAt):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintEvent(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventWithdrawFromEscrowExecuted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventWithdrawFromEscrowExecuted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventWithdrawFromEscrowExecuted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventPayForFibre) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPayForFibre) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPayForFibre) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Commitment) > 0 {
		i -= len(m.Commitment)
		copy(dAtA[i:], m.Commitment)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Commitment)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventPaymentPromiseTimeout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPaymentPromiseTimeout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPaymentPromiseTimeout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PaymentPromiseHash) > 0 {
		i -= len(m.PaymentPromiseHash)
		copy(dAtA[i:], m.PaymentPromiseHash)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.PaymentPromiseHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EscrowSigner) > 0 {
		i -= len(m.EscrowSigner)
		copy(dAtA[i:], m.EscrowSigner)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.EscrowSigner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Processor) > 0 {
		i -= len(m.Processor)
		copy(dAtA[i:], m.Processor)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Processor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventDepositToEscrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *EventWithdrawFromEscrowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.AvailableAt)
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *EventWithdrawFromEscrowExecuted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *EventPayForFibre) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Commitment)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventPaymentPromiseTimeout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Processor)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.EscrowSigner)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.PaymentPromiseHash)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventDepositToEscrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDepositToEscrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDepositToEscrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventWithdrawFromEscrowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventWithdrawFromEscrowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventWithdrawFromEscrowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.AvailableAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventWithdrawFromEscrowExecuted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventWithdrawFromEscrowExecuted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventWithdrawFromEscrowExecuted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPayForFibre) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPayForFibre: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPayForFibre: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = append(m.Namespace[:0], dAtA[iNdEx:postIndex]...)
			if m.Namespace == nil {
				m.Namespace = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitment", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commitment = append(m.Commitment[:0], dAtA[iNdEx:postIndex]...)
			if m.Commitment == nil {
				m.Commitment = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPaymentPromiseTimeout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPaymentPromiseTimeout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPaymentPromiseTimeout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Processor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Processor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentPromiseHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentPromiseHash = append(m.PaymentPromiseHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PaymentPromiseHash == nil {
				m.PaymentPromiseHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
