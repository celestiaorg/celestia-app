// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: celestia/fibre/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1756d0345d4fc93, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1756d0345d4fc93, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryEscrowAccountRequest is the request type for the Query/EscrowAccount RPC method.
type QueryEscrowAccountRequest struct {
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *QueryEscrowAccountRequest) Reset()         { *m = QueryEscrowAccountRequest{} }
func (m *QueryEscrowAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEscrowAccountRequest) ProtoMessage()    {}
func (*QueryEscrowAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1756d0345d4fc93, []int{2}
}
func (m *QueryEscrowAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEscrowAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEscrowAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEscrowAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEscrowAccountRequest.Merge(m, src)
}
func (m *QueryEscrowAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEscrowAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEscrowAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEscrowAccountRequest proto.InternalMessageInfo

func (m *QueryEscrowAccountRequest) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

// QueryEscrowAccountResponse is the response type for the Query/EscrowAccount RPC method.
type QueryEscrowAccountResponse struct {
	EscrowAccount *EscrowAccount `protobuf:"bytes,1,opt,name=escrow_account,json=escrowAccount,proto3" json:"escrow_account,omitempty"`
	Found         bool           `protobuf:"varint,2,opt,name=found,proto3" json:"found,omitempty"`
}

func (m *QueryEscrowAccountResponse) Reset()         { *m = QueryEscrowAccountResponse{} }
func (m *QueryEscrowAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEscrowAccountResponse) ProtoMessage()    {}
func (*QueryEscrowAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1756d0345d4fc93, []int{3}
}
func (m *QueryEscrowAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEscrowAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEscrowAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEscrowAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEscrowAccountResponse.Merge(m, src)
}
func (m *QueryEscrowAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEscrowAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEscrowAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEscrowAccountResponse proto.InternalMessageInfo

func (m *QueryEscrowAccountResponse) GetEscrowAccount() *EscrowAccount {
	if m != nil {
		return m.EscrowAccount
	}
	return nil
}

func (m *QueryEscrowAccountResponse) GetFound() bool {
	if m != nil {
		return m.Found
	}
	return false
}

// QueryWithdrawalsRequest is the request type for the Query/Withdrawals RPC method.
type QueryWithdrawalsRequest struct {
	Signer     string             `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryWithdrawalsRequest) Reset()         { *m = QueryWithdrawalsRequest{} }
func (m *QueryWithdrawalsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawalsRequest) ProtoMessage()    {}
func (*QueryWithdrawalsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1756d0345d4fc93, []int{4}
}
func (m *QueryWithdrawalsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawalsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawalsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawalsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawalsRequest.Merge(m, src)
}
func (m *QueryWithdrawalsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawalsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawalsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawalsRequest proto.InternalMessageInfo

func (m *QueryWithdrawalsRequest) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *QueryWithdrawalsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryWithdrawalsResponse is the response type for the Query/Withdrawals RPC method.
type QueryWithdrawalsResponse struct {
	Withdrawals []Withdrawal        `protobuf:"bytes,1,rep,name=withdrawals,proto3" json:"withdrawals"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryWithdrawalsResponse) Reset()         { *m = QueryWithdrawalsResponse{} }
func (m *QueryWithdrawalsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawalsResponse) ProtoMessage()    {}
func (*QueryWithdrawalsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1756d0345d4fc93, []int{5}
}
func (m *QueryWithdrawalsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawalsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawalsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawalsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawalsResponse.Merge(m, src)
}
func (m *QueryWithdrawalsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawalsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawalsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawalsResponse proto.InternalMessageInfo

func (m *QueryWithdrawalsResponse) GetWithdrawals() []Withdrawal {
	if m != nil {
		return m.Withdrawals
	}
	return nil
}

func (m *QueryWithdrawalsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryProcessedPaymentPromiseRequest is the request type for the Query/ProcessedPaymentPromise RPC method.
type QueryProcessedPaymentPromiseRequest struct {
	PromiseHash []byte `protobuf:"bytes,1,opt,name=promise_hash,json=promiseHash,proto3" json:"promise_hash,omitempty"`
}

func (m *QueryProcessedPaymentPromiseRequest) Reset()         { *m = QueryProcessedPaymentPromiseRequest{} }
func (m *QueryProcessedPaymentPromiseRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProcessedPaymentPromiseRequest) ProtoMessage()    {}
func (*QueryProcessedPaymentPromiseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1756d0345d4fc93, []int{6}
}
func (m *QueryProcessedPaymentPromiseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProcessedPaymentPromiseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProcessedPaymentPromiseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProcessedPaymentPromiseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProcessedPaymentPromiseRequest.Merge(m, src)
}
func (m *QueryProcessedPaymentPromiseRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProcessedPaymentPromiseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProcessedPaymentPromiseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProcessedPaymentPromiseRequest proto.InternalMessageInfo

func (m *QueryProcessedPaymentPromiseRequest) GetPromiseHash() []byte {
	if m != nil {
		return m.PromiseHash
	}
	return nil
}

// QueryProcessedPaymentPromiseResponse is the response type for the Query/ProcessedPaymentPromise RPC method.
type QueryProcessedPaymentPromiseResponse struct {
	ProcessedAt *time.Time `protobuf:"bytes,1,opt,name=processed_at,json=processedAt,proto3,stdtime" json:"processed_at,omitempty"`
	Found       bool       `protobuf:"varint,2,opt,name=found,proto3" json:"found,omitempty"`
}

func (m *QueryProcessedPaymentPromiseResponse) Reset()         { *m = QueryProcessedPaymentPromiseResponse{} }
func (m *QueryProcessedPaymentPromiseResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProcessedPaymentPromiseResponse) ProtoMessage()    {}
func (*QueryProcessedPaymentPromiseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1756d0345d4fc93, []int{7}
}
func (m *QueryProcessedPaymentPromiseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProcessedPaymentPromiseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProcessedPaymentPromiseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProcessedPaymentPromiseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProcessedPaymentPromiseResponse.Merge(m, src)
}
func (m *QueryProcessedPaymentPromiseResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProcessedPaymentPromiseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProcessedPaymentPromiseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProcessedPaymentPromiseResponse proto.InternalMessageInfo

func (m *QueryProcessedPaymentPromiseResponse) GetProcessedAt() *time.Time {
	if m != nil {
		return m.ProcessedAt
	}
	return nil
}

func (m *QueryProcessedPaymentPromiseResponse) GetFound() bool {
	if m != nil {
		return m.Found
	}
	return false
}

// QueryValidatePaymentPromiseRequest is the request type for the Query/ValidatePaymentPromise RPC method.
type QueryValidatePaymentPromiseRequest struct {
	Promise PaymentPromise `protobuf:"bytes,1,opt,name=promise,proto3" json:"promise"`
}

func (m *QueryValidatePaymentPromiseRequest) Reset()         { *m = QueryValidatePaymentPromiseRequest{} }
func (m *QueryValidatePaymentPromiseRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValidatePaymentPromiseRequest) ProtoMessage()    {}
func (*QueryValidatePaymentPromiseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1756d0345d4fc93, []int{8}
}
func (m *QueryValidatePaymentPromiseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatePaymentPromiseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatePaymentPromiseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatePaymentPromiseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatePaymentPromiseRequest.Merge(m, src)
}
func (m *QueryValidatePaymentPromiseRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatePaymentPromiseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatePaymentPromiseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatePaymentPromiseRequest proto.InternalMessageInfo

func (m *QueryValidatePaymentPromiseRequest) GetPromise() PaymentPromise {
	if m != nil {
		return m.Promise
	}
	return PaymentPromise{}
}

// QueryValidatePaymentPromiseResponse is the response type for the Query/ValidatePaymentPromise RPC method.
type QueryValidatePaymentPromiseResponse struct {
	Valid             bool       `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	ErrorMessage      string     `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	SufficientBalance bool       `protobuf:"varint,3,opt,name=sufficient_balance,json=sufficientBalance,proto3" json:"sufficient_balance,omitempty"`
	AlreadyProcessed  bool       `protobuf:"varint,4,opt,name=already_processed,json=alreadyProcessed,proto3" json:"already_processed,omitempty"`
	RequiredPayment   types.Coin `protobuf:"bytes,5,opt,name=required_payment,json=requiredPayment,proto3" json:"required_payment"`
	AvailableBalance  types.Coin `protobuf:"bytes,6,opt,name=available_balance,json=availableBalance,proto3" json:"available_balance"`
}

func (m *QueryValidatePaymentPromiseResponse) Reset()         { *m = QueryValidatePaymentPromiseResponse{} }
func (m *QueryValidatePaymentPromiseResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValidatePaymentPromiseResponse) ProtoMessage()    {}
func (*QueryValidatePaymentPromiseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1756d0345d4fc93, []int{9}
}
func (m *QueryValidatePaymentPromiseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatePaymentPromiseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatePaymentPromiseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatePaymentPromiseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatePaymentPromiseResponse.Merge(m, src)
}
func (m *QueryValidatePaymentPromiseResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatePaymentPromiseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatePaymentPromiseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatePaymentPromiseResponse proto.InternalMessageInfo

func (m *QueryValidatePaymentPromiseResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *QueryValidatePaymentPromiseResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *QueryValidatePaymentPromiseResponse) GetSufficientBalance() bool {
	if m != nil {
		return m.SufficientBalance
	}
	return false
}

func (m *QueryValidatePaymentPromiseResponse) GetAlreadyProcessed() bool {
	if m != nil {
		return m.AlreadyProcessed
	}
	return false
}

func (m *QueryValidatePaymentPromiseResponse) GetRequiredPayment() types.Coin {
	if m != nil {
		return m.RequiredPayment
	}
	return types.Coin{}
}

func (m *QueryValidatePaymentPromiseResponse) GetAvailableBalance() types.Coin {
	if m != nil {
		return m.AvailableBalance
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "celestia.fibre.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "celestia.fibre.v1.QueryParamsResponse")
	proto.RegisterType((*QueryEscrowAccountRequest)(nil), "celestia.fibre.v1.QueryEscrowAccountRequest")
	proto.RegisterType((*QueryEscrowAccountResponse)(nil), "celestia.fibre.v1.QueryEscrowAccountResponse")
	proto.RegisterType((*QueryWithdrawalsRequest)(nil), "celestia.fibre.v1.QueryWithdrawalsRequest")
	proto.RegisterType((*QueryWithdrawalsResponse)(nil), "celestia.fibre.v1.QueryWithdrawalsResponse")
	proto.RegisterType((*QueryProcessedPaymentPromiseRequest)(nil), "celestia.fibre.v1.QueryProcessedPaymentPromiseRequest")
	proto.RegisterType((*QueryProcessedPaymentPromiseResponse)(nil), "celestia.fibre.v1.QueryProcessedPaymentPromiseResponse")
	proto.RegisterType((*QueryValidatePaymentPromiseRequest)(nil), "celestia.fibre.v1.QueryValidatePaymentPromiseRequest")
	proto.RegisterType((*QueryValidatePaymentPromiseResponse)(nil), "celestia.fibre.v1.QueryValidatePaymentPromiseResponse")
}

func init() { proto.RegisterFile("celestia/fibre/v1/query.proto", fileDescriptor_d1756d0345d4fc93) }

var fileDescriptor_d1756d0345d4fc93 = []byte{
	// 919 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xdd, 0x6e, 0xdc, 0x44,
	0x14, 0x8e, 0xd3, 0x64, 0x69, 0x67, 0x13, 0x48, 0x86, 0xa8, 0xdd, 0x5a, 0x74, 0xb3, 0x71, 0x20,
	0x0d, 0x29, 0x6b, 0x6b, 0xb7, 0xd0, 0x4a, 0xbd, 0x4b, 0xaa, 0xd2, 0x8a, 0x3f, 0x05, 0x0b, 0x81,
	0xc4, 0xcd, 0x6a, 0xec, 0x9d, 0xf5, 0x8e, 0x64, 0x7b, 0x9c, 0x19, 0x7b, 0xc3, 0x2a, 0xea, 0x05,
	0x3c, 0x00, 0xaa, 0xc4, 0x05, 0x8f, 0x80, 0xc4, 0x03, 0xf0, 0x08, 0xa8, 0x97, 0x95, 0x90, 0x10,
	0x57, 0x80, 0x12, 0x1e, 0x04, 0x65, 0xe6, 0x78, 0xed, 0x74, 0xbd, 0xf9, 0xb9, 0xb3, 0xe7, 0x9c,
	0xef, 0x9c, 0xef, 0x9b, 0x33, 0xe7, 0x43, 0x77, 0x7c, 0x1a, 0x52, 0x99, 0x32, 0xe2, 0x0c, 0x98,
	0x27, 0xa8, 0x33, 0xea, 0x38, 0x07, 0x19, 0x15, 0x63, 0x3b, 0x11, 0x3c, 0xe5, 0x78, 0x35, 0x0f,
	0xdb, 0x2a, 0x6c, 0x8f, 0x3a, 0xe6, 0x5a, 0xc0, 0x03, 0xae, 0xa2, 0xce, 0xe9, 0x97, 0x4e, 0x34,
	0xdf, 0x09, 0x38, 0x0f, 0x42, 0xea, 0x90, 0x84, 0x39, 0x24, 0x8e, 0x79, 0x4a, 0x52, 0xc6, 0x63,
	0x09, 0xd1, 0x75, 0x88, 0xaa, 0x3f, 0x2f, 0x1b, 0x38, 0x29, 0x8b, 0xa8, 0x4c, 0x49, 0x94, 0x40,
	0xc2, 0x8e, 0xcf, 0x65, 0xc4, 0xa5, 0xe3, 0x11, 0x49, 0x35, 0x01, 0x67, 0xd4, 0xf1, 0x68, 0x4a,
	0x3a, 0x4e, 0x42, 0x02, 0x16, 0xab, 0x6a, 0x90, 0xdb, 0x2c, 0xe7, 0xe6, 0x59, 0x3e, 0x67, 0x45,
	0x7c, 0x4a, 0x52, 0x42, 0x04, 0x89, 0x72, 0x32, 0x15, 0x92, 0xb5, 0x38, 0x15, 0xb6, 0xd6, 0x10,
	0xfe, 0xf2, 0x94, 0xc0, 0xbe, 0xc2, 0xb8, 0xf4, 0x20, 0xa3, 0x32, 0xb5, 0xbe, 0x40, 0x6f, 0x9f,
	0x39, 0x95, 0x09, 0x8f, 0x25, 0xc5, 0x0f, 0x51, 0x4d, 0xd7, 0x6e, 0x18, 0x2d, 0x63, 0xbb, 0xde,
	0xbd, 0x6d, 0x4f, 0x5d, 0x98, 0xad, 0x21, 0x7b, 0x0b, 0x2f, 0xff, 0x5e, 0x9f, 0x73, 0x21, 0xdd,
	0xba, 0x8f, 0x6e, 0xab, 0x7a, 0x4f, 0xa4, 0x2f, 0xf8, 0xe1, 0xae, 0xef, 0xf3, 0x2c, 0x4e, 0xa1,
	0x19, 0xbe, 0x89, 0x6a, 0x92, 0x05, 0x31, 0x15, 0xaa, 0xea, 0x0d, 0x17, 0xfe, 0xac, 0x23, 0x64,
	0x56, 0x81, 0x80, 0xcb, 0x53, 0xf4, 0x26, 0x55, 0x81, 0x1e, 0xd1, 0x11, 0xe0, 0xd4, 0xaa, 0xe0,
	0x74, 0xb6, 0xc2, 0x32, 0x2d, 0xff, 0xe2, 0x35, 0xb4, 0x38, 0xe0, 0x59, 0xdc, 0x6f, 0xcc, 0xb7,
	0x8c, 0xed, 0xeb, 0xae, 0xfe, 0xb1, 0xc6, 0xe8, 0x96, 0x6a, 0xfe, 0x0d, 0x4b, 0x87, 0x7d, 0x41,
	0x0e, 0x49, 0x28, 0x2f, 0xe0, 0x8b, 0x3f, 0x46, 0xa8, 0x98, 0x9e, 0xaa, 0x56, 0xef, 0x6e, 0xd9,
	0x7a, 0x7c, 0xf6, 0xe9, 0xf8, 0x6c, 0xfd, 0xd6, 0x60, 0x88, 0xf6, 0x3e, 0x09, 0x28, 0xd4, 0x74,
	0x4b, 0x48, 0xeb, 0x57, 0x03, 0x35, 0xa6, 0x7b, 0x83, 0xec, 0x27, 0xa8, 0x7e, 0x58, 0x1c, 0x37,
	0x8c, 0xd6, 0xb5, 0xed, 0x7a, 0xf7, 0x4e, 0x85, 0xe6, 0x02, 0x0c, 0xb3, 0x28, 0xe3, 0xf0, 0xd3,
	0x0a, 0xae, 0x77, 0x2f, 0xe4, 0xaa, 0x39, 0x9c, 0x21, 0xfb, 0x0c, 0x6d, 0xea, 0x97, 0x22, 0xb8,
	0x4f, 0xa5, 0xa4, 0xfd, 0x7d, 0x32, 0x8e, 0x68, 0x9c, 0xee, 0x0b, 0x1e, 0x31, 0x99, 0xeb, 0xc3,
	0x1b, 0x68, 0x29, 0xd1, 0x27, 0xbd, 0x21, 0x91, 0x43, 0x75, 0x73, 0x4b, 0x6e, 0x1d, 0xce, 0x9e,
	0x11, 0x39, 0xb4, 0xbe, 0x37, 0xd0, 0xbb, 0xe7, 0x97, 0x82, 0x2b, 0x78, 0xac, 0x6a, 0xe9, 0x94,
	0x1e, 0xc9, 0xe7, 0x6e, 0xda, 0x7a, 0xeb, 0xec, 0x7c, 0xeb, 0xec, 0xaf, 0xf2, 0xad, 0xdb, 0x5b,
	0x78, 0xf1, 0xcf, 0xba, 0xa1, 0xba, 0x69, 0xd4, 0xee, 0xac, 0xa9, 0x07, 0xc8, 0x52, 0x14, 0xbe,
	0x26, 0x21, 0xeb, 0x93, 0x94, 0x56, 0x8b, 0xd9, 0x45, 0x6f, 0x00, 0x71, 0xe8, 0xbd, 0x51, 0xb9,
	0x07, 0x65, 0x28, 0xcc, 0x20, 0xc7, 0x59, 0x7f, 0xce, 0xc3, 0xbd, 0xcd, 0xea, 0x04, 0x5a, 0xd7,
	0xd0, 0xe2, 0xe8, 0x34, 0x43, 0x35, 0xba, 0xee, 0xea, 0x1f, 0xbc, 0x89, 0x96, 0xa9, 0x10, 0x5c,
	0xf4, 0x22, 0x2a, 0x25, 0x09, 0xa8, 0x12, 0x71, 0xc3, 0x5d, 0x52, 0x87, 0x9f, 0xeb, 0x33, 0xdc,
	0x46, 0x58, 0x66, 0x83, 0x01, 0xf3, 0x19, 0x8d, 0xd3, 0x9e, 0x47, 0x42, 0x12, 0xfb, 0xb4, 0x71,
	0x4d, 0xd5, 0x59, 0x2d, 0x22, 0x7b, 0x3a, 0x80, 0xef, 0xa1, 0x55, 0x12, 0x0a, 0x4a, 0xfa, 0xe3,
	0xde, 0xe4, 0x9e, 0x1a, 0x0b, 0x2a, 0x7b, 0x05, 0x02, 0x93, 0xc1, 0xe0, 0x4f, 0xd0, 0x8a, 0xa0,
	0x07, 0x19, 0x13, 0xb4, 0xdf, 0x4b, 0x34, 0xf3, 0xc6, 0x62, 0x6e, 0x09, 0xa5, 0x47, 0x94, 0x3f,
	0x9f, 0xc7, 0x9c, 0xc5, 0x70, 0x05, 0x6f, 0xe5, 0x40, 0x50, 0x8c, 0x3f, 0x43, 0xab, 0x64, 0x44,
	0x58, 0x48, 0xbc, 0x90, 0x4e, 0x68, 0xd6, 0x2e, 0x57, 0x6c, 0x65, 0x82, 0x04, 0x19, 0xdd, 0x5f,
	0x6a, 0x68, 0x51, 0x5d, 0x2c, 0x3e, 0x40, 0x35, 0xed, 0x45, 0xf8, 0xbd, 0x8a, 0xf1, 0x4c, 0x9b,
	0x9e, 0xb9, 0x75, 0x51, 0x9a, 0x9e, 0x89, 0xd5, 0xf8, 0xe1, 0x8f, 0xff, 0x7e, 0x9a, 0xc7, 0x78,
	0xe5, 0x75, 0xc7, 0xc5, 0x3f, 0x1b, 0x68, 0xf9, 0x8c, 0xd7, 0xe0, 0x0f, 0x66, 0xd5, 0xac, 0x72,
	0x42, 0xb3, 0x7d, 0xc9, 0x6c, 0x20, 0xf2, 0xbe, 0x22, 0xb2, 0x89, 0x37, 0x0a, 0x22, 0xda, 0xda,
	0xda, 0x60, 0x89, 0xce, 0x91, 0xb6, 0xa6, 0xe7, 0xf8, 0x47, 0x03, 0xd5, 0x4b, 0x76, 0x82, 0x77,
	0x66, 0x75, 0x9a, 0xf6, 0x3b, 0xf3, 0xde, 0xa5, 0x72, 0x81, 0xd3, 0x96, 0xe2, 0xd4, 0xc2, 0xcd,
	0x82, 0x53, 0xc9, 0x77, 0x0a, 0x42, 0xbf, 0x1b, 0xe8, 0xd6, 0x8c, 0x45, 0xc7, 0x0f, 0x66, 0x0e,
	0xe2, 0x5c, 0x93, 0x31, 0x1f, 0x5e, 0x19, 0x07, 0xa4, 0x1f, 0x29, 0xd2, 0x1f, 0xe2, 0x6e, 0x69,
	0xa2, 0x39, 0xa4, 0x0d, 0xef, 0xbb, 0x0d, 0xab, 0xeb, 0x1c, 0x95, 0x8d, 0xec, 0x39, 0xfe, 0xcd,
	0x40, 0x37, 0xab, 0x97, 0x18, 0x7f, 0x34, 0x8b, 0xcf, 0xb9, 0xf6, 0x62, 0x3e, 0xb8, 0x2a, 0x0c,
	0x54, 0xb4, 0x95, 0x8a, 0xbb, 0x8f, 0x8c, 0x1d, 0xcb, 0x2a, 0x84, 0x8c, 0x00, 0xf4, 0xba, 0x8e,
	0xbd, 0x4f, 0x5f, 0x1e, 0x37, 0x8d, 0x57, 0xc7, 0x4d, 0xe3, 0xdf, 0xe3, 0xa6, 0xf1, 0xe2, 0xa4,
	0x39, 0xf7, 0xea, 0xa4, 0x39, 0xf7, 0xd7, 0x49, 0x73, 0xee, 0xdb, 0x4e, 0xc0, 0xd2, 0x61, 0xe6,
	0xd9, 0x3e, 0x8f, 0x9c, 0x9c, 0x0a, 0x17, 0xc1, 0xe4, 0xbb, 0x4d, 0x92, 0xc4, 0xf9, 0x0e, 0x5a,
	0xa4, 0xe3, 0x84, 0x4a, 0xaf, 0xa6, 0x5c, 0xf7, 0xfe, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x3e,
	0x8c, 0x35, 0xb2, 0x61, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of the fibre module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// EscrowAccount queries an escrow account by signer address.
	EscrowAccount(ctx context.Context, in *QueryEscrowAccountRequest, opts ...grpc.CallOption) (*QueryEscrowAccountResponse, error)
	// Withdrawals queries all withdrawals for an escrow account by signer address.
	Withdrawals(ctx context.Context, in *QueryWithdrawalsRequest, opts ...grpc.CallOption) (*QueryWithdrawalsResponse, error)
	// ProcessedPaymentPromise queries whether a payment promise has been processed.
	ProcessedPaymentPromise(ctx context.Context, in *QueryProcessedPaymentPromiseRequest, opts ...grpc.CallOption) (*QueryProcessedPaymentPromiseResponse, error)
	// ValidatePaymentPromise validates a payment promise for server use.
	ValidatePaymentPromise(ctx context.Context, in *QueryValidatePaymentPromiseRequest, opts ...grpc.CallOption) (*QueryValidatePaymentPromiseResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/celestia.fibre.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EscrowAccount(ctx context.Context, in *QueryEscrowAccountRequest, opts ...grpc.CallOption) (*QueryEscrowAccountResponse, error) {
	out := new(QueryEscrowAccountResponse)
	err := c.cc.Invoke(ctx, "/celestia.fibre.v1.Query/EscrowAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Withdrawals(ctx context.Context, in *QueryWithdrawalsRequest, opts ...grpc.CallOption) (*QueryWithdrawalsResponse, error) {
	out := new(QueryWithdrawalsResponse)
	err := c.cc.Invoke(ctx, "/celestia.fibre.v1.Query/Withdrawals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProcessedPaymentPromise(ctx context.Context, in *QueryProcessedPaymentPromiseRequest, opts ...grpc.CallOption) (*QueryProcessedPaymentPromiseResponse, error) {
	out := new(QueryProcessedPaymentPromiseResponse)
	err := c.cc.Invoke(ctx, "/celestia.fibre.v1.Query/ProcessedPaymentPromise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidatePaymentPromise(ctx context.Context, in *QueryValidatePaymentPromiseRequest, opts ...grpc.CallOption) (*QueryValidatePaymentPromiseResponse, error) {
	out := new(QueryValidatePaymentPromiseResponse)
	err := c.cc.Invoke(ctx, "/celestia.fibre.v1.Query/ValidatePaymentPromise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the parameters of the fibre module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// EscrowAccount queries an escrow account by signer address.
	EscrowAccount(context.Context, *QueryEscrowAccountRequest) (*QueryEscrowAccountResponse, error)
	// Withdrawals queries all withdrawals for an escrow account by signer address.
	Withdrawals(context.Context, *QueryWithdrawalsRequest) (*QueryWithdrawalsResponse, error)
	// ProcessedPaymentPromise queries whether a payment promise has been processed.
	ProcessedPaymentPromise(context.Context, *QueryProcessedPaymentPromiseRequest) (*QueryProcessedPaymentPromiseResponse, error)
	// ValidatePaymentPromise validates a payment promise for server use.
	ValidatePaymentPromise(context.Context, *QueryValidatePaymentPromiseRequest) (*QueryValidatePaymentPromiseResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) EscrowAccount(ctx context.Context, req *QueryEscrowAccountRequest) (*QueryEscrowAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EscrowAccount not implemented")
}
func (*UnimplementedQueryServer) Withdrawals(ctx context.Context, req *QueryWithdrawalsRequest) (*QueryWithdrawalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdrawals not implemented")
}
func (*UnimplementedQueryServer) ProcessedPaymentPromise(ctx context.Context, req *QueryProcessedPaymentPromiseRequest) (*QueryProcessedPaymentPromiseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessedPaymentPromise not implemented")
}
func (*UnimplementedQueryServer) ValidatePaymentPromise(ctx context.Context, req *QueryValidatePaymentPromiseRequest) (*QueryValidatePaymentPromiseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePaymentPromise not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celestia.fibre.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EscrowAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEscrowAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EscrowAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celestia.fibre.v1.Query/EscrowAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EscrowAccount(ctx, req.(*QueryEscrowAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Withdrawals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWithdrawalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Withdrawals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celestia.fibre.v1.Query/Withdrawals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Withdrawals(ctx, req.(*QueryWithdrawalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProcessedPaymentPromise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProcessedPaymentPromiseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProcessedPaymentPromise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celestia.fibre.v1.Query/ProcessedPaymentPromise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProcessedPaymentPromise(ctx, req.(*QueryProcessedPaymentPromiseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidatePaymentPromise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatePaymentPromiseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidatePaymentPromise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celestia.fibre.v1.Query/ValidatePaymentPromise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidatePaymentPromise(ctx, req.(*QueryValidatePaymentPromiseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "celestia.fibre.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "EscrowAccount",
			Handler:    _Query_EscrowAccount_Handler,
		},
		{
			MethodName: "Withdrawals",
			Handler:    _Query_Withdrawals_Handler,
		},
		{
			MethodName: "ProcessedPaymentPromise",
			Handler:    _Query_ProcessedPaymentPromise_Handler,
		},
		{
			MethodName: "ValidatePaymentPromise",
			Handler:    _Query_ValidatePaymentPromise_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "celestia/fibre/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryEscrowAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEscrowAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEscrowAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEscrowAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEscrowAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEscrowAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Found {
		i--
		if m.Found {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.EscrowAccount != nil {
		{
			size, err := m.EscrowAccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawalsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawalsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawalsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawalsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawalsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawalsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Withdrawals) > 0 {
		for iNdEx := len(m.Withdrawals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Withdrawals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryProcessedPaymentPromiseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProcessedPaymentPromiseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProcessedPaymentPromiseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PromiseHash) > 0 {
		i -= len(m.PromiseHash)
		copy(dAtA[i:], m.PromiseHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PromiseHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProcessedPaymentPromiseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProcessedPaymentPromiseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProcessedPaymentPromiseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Found {
		i--
		if m.Found {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.ProcessedAt != nil {
		n5, err5 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.ProcessedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ProcessedAt):])
		if err5 != nil {
			return 0, err5
		}
		i -= n5
		i = encodeVarintQuery(dAtA, i, uint64(n5))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidatePaymentPromiseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatePaymentPromiseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatePaymentPromiseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Promise.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryValidatePaymentPromiseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatePaymentPromiseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatePaymentPromiseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AvailableBalance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.RequiredPayment.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.AlreadyProcessed {
		i--
		if m.AlreadyProcessed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.SufficientBalance {
		i--
		if m.SufficientBalance {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0x12
	}
	if m.Valid {
		i--
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryEscrowAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEscrowAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EscrowAccount != nil {
		l = m.EscrowAccount.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Found {
		n += 2
	}
	return n
}

func (m *QueryWithdrawalsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWithdrawalsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Withdrawals) > 0 {
		for _, e := range m.Withdrawals {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProcessedPaymentPromiseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PromiseHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProcessedPaymentPromiseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProcessedAt != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ProcessedAt)
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Found {
		n += 2
	}
	return n
}

func (m *QueryValidatePaymentPromiseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Promise.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryValidatePaymentPromiseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valid {
		n += 2
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.SufficientBalance {
		n += 2
	}
	if m.AlreadyProcessed {
		n += 2
	}
	l = m.RequiredPayment.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.AvailableBalance.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEscrowAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEscrowAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEscrowAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEscrowAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEscrowAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEscrowAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EscrowAccount == nil {
				m.EscrowAccount = &EscrowAccount{}
			}
			if err := m.EscrowAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Found", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Found = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawalsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawalsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawalsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawalsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawalsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawalsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdrawals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Withdrawals = append(m.Withdrawals, Withdrawal{})
			if err := m.Withdrawals[len(m.Withdrawals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProcessedPaymentPromiseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProcessedPaymentPromiseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProcessedPaymentPromiseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromiseHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PromiseHash = append(m.PromiseHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PromiseHash == nil {
				m.PromiseHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProcessedPaymentPromiseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProcessedPaymentPromiseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProcessedPaymentPromiseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProcessedAt == nil {
				m.ProcessedAt = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.ProcessedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Found", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Found = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatePaymentPromiseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatePaymentPromiseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatePaymentPromiseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Promise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Promise.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatePaymentPromiseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatePaymentPromiseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatePaymentPromiseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SufficientBalance", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SufficientBalance = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlreadyProcessed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AlreadyProcessed = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredPayment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequiredPayment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AvailableBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
