// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: celestia/fibre/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryFibreProviderInfoRequest is the request type for Query/FibreProviderInfo
type QueryFibreProviderInfoRequest struct {
	// validator_address is the operator address of the validator
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
}

func (m *QueryFibreProviderInfoRequest) Reset()         { *m = QueryFibreProviderInfoRequest{} }
func (m *QueryFibreProviderInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFibreProviderInfoRequest) ProtoMessage()    {}
func (*QueryFibreProviderInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1756d0345d4fc93, []int{0}
}
func (m *QueryFibreProviderInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFibreProviderInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFibreProviderInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFibreProviderInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFibreProviderInfoRequest.Merge(m, src)
}
func (m *QueryFibreProviderInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFibreProviderInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFibreProviderInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFibreProviderInfoRequest proto.InternalMessageInfo

func (m *QueryFibreProviderInfoRequest) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

// QueryFibreProviderInfoResponse is the response type for Query/FibreProviderInfo
type QueryFibreProviderInfoResponse struct {
	// info contains the fibre provider information
	Info *FibreProviderInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	// found indicates if the validator has registered info
	Found bool `protobuf:"varint,2,opt,name=found,proto3" json:"found,omitempty"`
}

func (m *QueryFibreProviderInfoResponse) Reset()         { *m = QueryFibreProviderInfoResponse{} }
func (m *QueryFibreProviderInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFibreProviderInfoResponse) ProtoMessage()    {}
func (*QueryFibreProviderInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1756d0345d4fc93, []int{1}
}
func (m *QueryFibreProviderInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFibreProviderInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFibreProviderInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFibreProviderInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFibreProviderInfoResponse.Merge(m, src)
}
func (m *QueryFibreProviderInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFibreProviderInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFibreProviderInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFibreProviderInfoResponse proto.InternalMessageInfo

func (m *QueryFibreProviderInfoResponse) GetInfo() *FibreProviderInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *QueryFibreProviderInfoResponse) GetFound() bool {
	if m != nil {
		return m.Found
	}
	return false
}

// QueryAllActiveFibreProvidersRequest is the request type for Query/AllActiveFibreProviders
type QueryAllActiveFibreProvidersRequest struct {
	// pagination defines optional pagination parameters
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllActiveFibreProvidersRequest) Reset()         { *m = QueryAllActiveFibreProvidersRequest{} }
func (m *QueryAllActiveFibreProvidersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllActiveFibreProvidersRequest) ProtoMessage()    {}
func (*QueryAllActiveFibreProvidersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1756d0345d4fc93, []int{2}
}
func (m *QueryAllActiveFibreProvidersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllActiveFibreProvidersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllActiveFibreProvidersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllActiveFibreProvidersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllActiveFibreProvidersRequest.Merge(m, src)
}
func (m *QueryAllActiveFibreProvidersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllActiveFibreProvidersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllActiveFibreProvidersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllActiveFibreProvidersRequest proto.InternalMessageInfo

func (m *QueryAllActiveFibreProvidersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllActiveFibreProvidersResponse is the response type for Query/AllActiveFibreProviders
type QueryAllActiveFibreProvidersResponse struct {
	// providers contains all active fibre providers
	Providers []ActiveFibreProvider `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers"`
	// pagination defines the pagination response
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllActiveFibreProvidersResponse) Reset()         { *m = QueryAllActiveFibreProvidersResponse{} }
func (m *QueryAllActiveFibreProvidersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllActiveFibreProvidersResponse) ProtoMessage()    {}
func (*QueryAllActiveFibreProvidersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1756d0345d4fc93, []int{3}
}
func (m *QueryAllActiveFibreProvidersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllActiveFibreProvidersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllActiveFibreProvidersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllActiveFibreProvidersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllActiveFibreProvidersResponse.Merge(m, src)
}
func (m *QueryAllActiveFibreProvidersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllActiveFibreProvidersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllActiveFibreProvidersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllActiveFibreProvidersResponse proto.InternalMessageInfo

func (m *QueryAllActiveFibreProvidersResponse) GetProviders() []ActiveFibreProvider {
	if m != nil {
		return m.Providers
	}
	return nil
}

func (m *QueryAllActiveFibreProvidersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryFibreProviderInfoRequest)(nil), "celestia.fibre.v1.QueryFibreProviderInfoRequest")
	proto.RegisterType((*QueryFibreProviderInfoResponse)(nil), "celestia.fibre.v1.QueryFibreProviderInfoResponse")
	proto.RegisterType((*QueryAllActiveFibreProvidersRequest)(nil), "celestia.fibre.v1.QueryAllActiveFibreProvidersRequest")
	proto.RegisterType((*QueryAllActiveFibreProvidersResponse)(nil), "celestia.fibre.v1.QueryAllActiveFibreProvidersResponse")
}

func init() { proto.RegisterFile("celestia/fibre/v1/query.proto", fileDescriptor_d1756d0345d4fc93) }

var fileDescriptor_d1756d0345d4fc93 = []byte{
	// 497 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4f, 0x6f, 0xd3, 0x30,
	0x1c, 0xad, 0xcb, 0x86, 0x98, 0xb9, 0x50, 0x6b, 0x12, 0x55, 0xc5, 0x42, 0x95, 0x0d, 0x98, 0x98,
	0x66, 0x93, 0x21, 0x31, 0xae, 0xdd, 0x61, 0x88, 0x3f, 0x87, 0x91, 0x23, 0x17, 0xe4, 0x34, 0x6e,
	0xb0, 0x94, 0xe6, 0xe7, 0xc5, 0x6e, 0xc4, 0x84, 0xb8, 0xf0, 0x09, 0x90, 0xf8, 0x24, 0x9c, 0x38,
	0xf0, 0x05, 0x76, 0x9c, 0xc4, 0x85, 0x13, 0x42, 0x2d, 0x5f, 0x81, 0x3b, 0xaa, 0x9d, 0x76, 0x9b,
	0x92, 0x16, 0xed, 0xe6, 0xfa, 0xf5, 0xbd, 0xdf, 0x7b, 0xcf, 0xbf, 0xe0, 0x8d, 0xbe, 0x48, 0x85,
	0x36, 0x92, 0xb3, 0x81, 0x8c, 0x72, 0xc1, 0x8a, 0x80, 0x1d, 0x8f, 0x44, 0x7e, 0x42, 0x55, 0x0e,
	0x06, 0x48, 0x6b, 0x06, 0x53, 0x0b, 0xd3, 0x22, 0xe8, 0xd4, 0x30, 0x1c, 0x66, 0x19, 0x9d, 0x87,
	0x7d, 0xd0, 0x43, 0xd0, 0x2c, 0xe2, 0x5a, 0x38, 0x29, 0x56, 0x04, 0x91, 0x30, 0x3c, 0x60, 0x8a,
	0x27, 0x32, 0xe3, 0x46, 0x42, 0x56, 0xfe, 0xf7, 0x4e, 0x02, 0x90, 0xa4, 0x82, 0x71, 0x25, 0x19,
	0xcf, 0x32, 0x30, 0x16, 0xd4, 0x25, 0xba, 0x9e, 0x40, 0x02, 0xf6, 0xc8, 0xa6, 0x27, 0x77, 0xeb,
	0xbf, 0xc2, 0x1b, 0xaf, 0xa7, 0xaa, 0x87, 0xd3, 0x99, 0x47, 0x39, 0x14, 0x32, 0x16, 0xf9, 0xf3,
	0x6c, 0x00, 0xa1, 0x38, 0x1e, 0x09, 0x6d, 0xc8, 0x0e, 0x6e, 0x15, 0x3c, 0x95, 0x31, 0x37, 0x90,
	0xbf, 0xe5, 0x71, 0x9c, 0x0b, 0xad, 0xdb, 0xa8, 0x8b, 0xb6, 0xd7, 0xc2, 0x5b, 0x73, 0xa0, 0xe7,
	0xee, 0x7d, 0x85, 0xbd, 0x45, 0x6a, 0x5a, 0x41, 0xa6, 0x05, 0x79, 0x8a, 0x57, 0x64, 0x36, 0x00,
	0xab, 0x70, 0x73, 0x6f, 0x8b, 0x56, 0x0a, 0xa1, 0x55, 0xae, 0x65, 0x90, 0x75, 0xbc, 0x3a, 0x80,
	0x51, 0x16, 0xb7, 0x9b, 0x5d, 0xb4, 0x7d, 0x23, 0x74, 0x3f, 0xfc, 0x21, 0xde, 0xb4, 0x13, 0x7b,
	0x69, 0xda, 0xeb, 0x1b, 0x59, 0x88, 0x4b, 0x74, 0x3d, 0x4b, 0x71, 0x88, 0xf1, 0x79, 0x5d, 0xe5,
	0xf0, 0xfb, 0xd4, 0x75, 0x4b, 0xa7, 0xdd, 0x52, 0xf7, 0x4c, 0x65, 0xb7, 0xf4, 0x88, 0x27, 0xa2,
	0xe4, 0x86, 0x17, 0x98, 0xfe, 0x77, 0x84, 0xb7, 0x96, 0xcf, 0x2b, 0x73, 0xbe, 0xc0, 0x6b, 0x6a,
	0x76, 0xd9, 0x46, 0xdd, 0x6b, 0x6e, 0x5e, 0x25, 0x6c, 0x8d, 0xc6, 0xc1, 0xca, 0xe9, 0xaf, 0xbb,
	0x8d, 0xf0, 0x9c, 0x4e, 0x9e, 0x5d, 0x32, 0xdf, 0xb4, 0xe6, 0x1f, 0xfc, 0xd7, 0xbc, 0x33, 0x72,
	0xd1, 0xfd, 0xde, 0xdf, 0x26, 0x5e, 0xb5, 0xee, 0xc9, 0x57, 0x84, 0x5b, 0x95, 0xa2, 0xc9, 0xa3,
	0x1a, 0x87, 0x4b, 0xb7, 0xa3, 0x13, 0x5c, 0x81, 0xe1, 0x0c, 0xf9, 0xfb, 0x9f, 0x7e, 0xfc, 0xf9,
	0xd2, 0x0c, 0x08, 0x63, 0xd5, 0xcd, 0x9f, 0x65, 0x66, 0x1f, 0x2a, 0x3b, 0xf7, 0x91, 0x7c, 0x43,
	0xf8, 0xf6, 0x82, 0xda, 0xc9, 0x93, 0x45, 0x3e, 0x96, 0xef, 0x45, 0x67, 0xff, 0xca, 0xbc, 0x32,
	0xc5, 0x8e, 0x4d, 0x71, 0x8f, 0x6c, 0xd6, 0xa4, 0xe0, 0x96, 0xb8, 0x3b, 0x7f, 0xc0, 0x83, 0x97,
	0xa7, 0x63, 0x0f, 0x9d, 0x8d, 0x3d, 0xf4, 0x7b, 0xec, 0xa1, 0xcf, 0x13, 0xaf, 0x71, 0x36, 0xf1,
	0x1a, 0x3f, 0x27, 0x5e, 0xe3, 0x4d, 0x90, 0x48, 0xf3, 0x6e, 0x14, 0xd1, 0x3e, 0x0c, 0xe7, 0x42,
	0x90, 0x27, 0xf3, 0xf3, 0x2e, 0x57, 0x8a, 0xbd, 0x2f, 0xa5, 0xcd, 0x89, 0x12, 0x3a, 0xba, 0x6e,
	0x3f, 0xdc, 0xc7, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xa4, 0xae, 0xcf, 0x1f, 0x6b, 0x04, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// FibreProviderInfo queries fibre provider info for a specific validator
	FibreProviderInfo(ctx context.Context, in *QueryFibreProviderInfoRequest, opts ...grpc.CallOption) (*QueryFibreProviderInfoResponse, error)
	// AllActiveFibreProviders queries all fibre provider info for active validators
	AllActiveFibreProviders(ctx context.Context, in *QueryAllActiveFibreProvidersRequest, opts ...grpc.CallOption) (*QueryAllActiveFibreProvidersResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) FibreProviderInfo(ctx context.Context, in *QueryFibreProviderInfoRequest, opts ...grpc.CallOption) (*QueryFibreProviderInfoResponse, error) {
	out := new(QueryFibreProviderInfoResponse)
	err := c.cc.Invoke(ctx, "/celestia.fibre.v1.Query/FibreProviderInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllActiveFibreProviders(ctx context.Context, in *QueryAllActiveFibreProvidersRequest, opts ...grpc.CallOption) (*QueryAllActiveFibreProvidersResponse, error) {
	out := new(QueryAllActiveFibreProvidersResponse)
	err := c.cc.Invoke(ctx, "/celestia.fibre.v1.Query/AllActiveFibreProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// FibreProviderInfo queries fibre provider info for a specific validator
	FibreProviderInfo(context.Context, *QueryFibreProviderInfoRequest) (*QueryFibreProviderInfoResponse, error)
	// AllActiveFibreProviders queries all fibre provider info for active validators
	AllActiveFibreProviders(context.Context, *QueryAllActiveFibreProvidersRequest) (*QueryAllActiveFibreProvidersResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) FibreProviderInfo(ctx context.Context, req *QueryFibreProviderInfoRequest) (*QueryFibreProviderInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FibreProviderInfo not implemented")
}
func (*UnimplementedQueryServer) AllActiveFibreProviders(ctx context.Context, req *QueryAllActiveFibreProvidersRequest) (*QueryAllActiveFibreProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllActiveFibreProviders not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_FibreProviderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFibreProviderInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FibreProviderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celestia.fibre.v1.Query/FibreProviderInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FibreProviderInfo(ctx, req.(*QueryFibreProviderInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllActiveFibreProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllActiveFibreProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllActiveFibreProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celestia.fibre.v1.Query/AllActiveFibreProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllActiveFibreProviders(ctx, req.(*QueryAllActiveFibreProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "celestia.fibre.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FibreProviderInfo",
			Handler:    _Query_FibreProviderInfo_Handler,
		},
		{
			MethodName: "AllActiveFibreProviders",
			Handler:    _Query_AllActiveFibreProviders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "celestia/fibre/v1/query.proto",
}

func (m *QueryFibreProviderInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFibreProviderInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFibreProviderInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFibreProviderInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFibreProviderInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFibreProviderInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Found {
		i--
		if m.Found {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllActiveFibreProvidersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllActiveFibreProvidersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllActiveFibreProvidersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllActiveFibreProvidersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllActiveFibreProvidersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllActiveFibreProvidersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Providers) > 0 {
		for iNdEx := len(m.Providers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Providers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryFibreProviderInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFibreProviderInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Found {
		n += 2
	}
	return n
}

func (m *QueryAllActiveFibreProvidersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllActiveFibreProvidersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Providers) > 0 {
		for _, e := range m.Providers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryFibreProviderInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFibreProviderInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFibreProviderInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFibreProviderInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFibreProviderInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFibreProviderInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &FibreProviderInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Found", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Found = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllActiveFibreProvidersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllActiveFibreProvidersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllActiveFibreProvidersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllActiveFibreProvidersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllActiveFibreProvidersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllActiveFibreProvidersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Providers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Providers = append(m.Providers, ActiveFibreProvider{})
			if err := m.Providers[len(m.Providers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
