// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: celestia/fibre/v1/fibre.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EscrowAccount helps guarantee payment for a signed PaymentPromise by ensuring
// that a user does not remove funds directly after validators sign over and
// provide service for a blob.
type EscrowAccount struct {
	// signer is the address that controls this escrow account
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// balance is the total amount currently held in escrow
	Balance types.Coin `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance"`
	// available_balance is the amount available for new payments
	AvailableBalance types.Coin `protobuf:"bytes,3,opt,name=available_balance,json=availableBalance,proto3" json:"available_balance"`
}

func (m *EscrowAccount) Reset()         { *m = EscrowAccount{} }
func (m *EscrowAccount) String() string { return proto.CompactTextString(m) }
func (*EscrowAccount) ProtoMessage()    {}
func (*EscrowAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a166b9003c3a966, []int{0}
}
func (m *EscrowAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EscrowAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EscrowAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EscrowAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EscrowAccount.Merge(m, src)
}
func (m *EscrowAccount) XXX_Size() int {
	return m.Size()
}
func (m *EscrowAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_EscrowAccount.DiscardUnknown(m)
}

var xxx_messageInfo_EscrowAccount proto.InternalMessageInfo

func (m *EscrowAccount) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *EscrowAccount) GetBalance() types.Coin {
	if m != nil {
		return m.Balance
	}
	return types.Coin{}
}

func (m *EscrowAccount) GetAvailableBalance() types.Coin {
	if m != nil {
		return m.AvailableBalance
	}
	return types.Coin{}
}

// PendingWithdrawal tracks withdrawal requests to implement the delay mechanism.
type PendingWithdrawal struct {
	// signer is the address that owns the escrow account this withdrawal is for
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// amount is the amount to be withdrawn
	Amount types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
	// requested_at is the timestamp when withdrawal was requested
	RequestedAt time.Time `protobuf:"bytes,3,opt,name=requested_at,json=requestedAt,proto3,stdtime" json:"requested_at"`
}

func (m *PendingWithdrawal) Reset()         { *m = PendingWithdrawal{} }
func (m *PendingWithdrawal) String() string { return proto.CompactTextString(m) }
func (*PendingWithdrawal) ProtoMessage()    {}
func (*PendingWithdrawal) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a166b9003c3a966, []int{1}
}
func (m *PendingWithdrawal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingWithdrawal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingWithdrawal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingWithdrawal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingWithdrawal.Merge(m, src)
}
func (m *PendingWithdrawal) XXX_Size() int {
	return m.Size()
}
func (m *PendingWithdrawal) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingWithdrawal.DiscardUnknown(m)
}

var xxx_messageInfo_PendingWithdrawal proto.InternalMessageInfo

func (m *PendingWithdrawal) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *PendingWithdrawal) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *PendingWithdrawal) GetRequestedAt() time.Time {
	if m != nil {
		return m.RequestedAt
	}
	return time.Time{}
}

// PaymentPromise contains the commitment and payment details for a fibre blob.
type PaymentPromise struct {
	// signer is the owner of the escrow account to charge
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// namespace is the namespace the blob is associated with. share version must be 2.
	Namespace []byte `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// blob_size is the size of the blob in bytes
	BlobSize uint32 `protobuf:"varint,3,opt,name=blob_size,json=blobSize,proto3" json:"blob_size,omitempty"`
	// commitment is the hash of the row root and the Random Linear Combination (RLC) root
	Commitment []byte `protobuf:"bytes,4,opt,name=commitment,proto3" json:"commitment,omitempty"`
	// row_version is the version of the row format
	RowVersion uint32 `protobuf:"varint,5,opt,name=row_version,json=rowVersion,proto3" json:"row_version,omitempty"`
	// creation_timestamp is the timestamp when this promise was created. This
	// is critical for determining which validators sign the commitment and
	// determining when service stops for this blob.
	CreationTimestamp time.Time `protobuf:"bytes,6,opt,name=creation_timestamp,json=creationTimestamp,proto3,stdtime" json:"creation_timestamp"`
	// signature is the escrow owner's signature over the sign bytes
	Signature []byte `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *PaymentPromise) Reset()         { *m = PaymentPromise{} }
func (m *PaymentPromise) String() string { return proto.CompactTextString(m) }
func (*PaymentPromise) ProtoMessage()    {}
func (*PaymentPromise) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a166b9003c3a966, []int{2}
}
func (m *PaymentPromise) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentPromise) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentPromise.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentPromise) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentPromise.Merge(m, src)
}
func (m *PaymentPromise) XXX_Size() int {
	return m.Size()
}
func (m *PaymentPromise) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentPromise.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentPromise proto.InternalMessageInfo

func (m *PaymentPromise) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *PaymentPromise) GetNamespace() []byte {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *PaymentPromise) GetBlobSize() uint32 {
	if m != nil {
		return m.BlobSize
	}
	return 0
}

func (m *PaymentPromise) GetCommitment() []byte {
	if m != nil {
		return m.Commitment
	}
	return nil
}

func (m *PaymentPromise) GetRowVersion() uint32 {
	if m != nil {
		return m.RowVersion
	}
	return 0
}

func (m *PaymentPromise) GetCreationTimestamp() time.Time {
	if m != nil {
		return m.CreationTimestamp
	}
	return time.Time{}
}

func (m *PaymentPromise) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*EscrowAccount)(nil), "celestia.fibre.v1.EscrowAccount")
	proto.RegisterType((*PendingWithdrawal)(nil), "celestia.fibre.v1.PendingWithdrawal")
	proto.RegisterType((*PaymentPromise)(nil), "celestia.fibre.v1.PaymentPromise")
}

func init() { proto.RegisterFile("celestia/fibre/v1/fibre.proto", fileDescriptor_0a166b9003c3a966) }

var fileDescriptor_0a166b9003c3a966 = []byte{
	// 510 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x8d, 0x4b, 0x49, 0x9b, 0x4d, 0x8b, 0x88, 0xd5, 0x83, 0x1b, 0xc0, 0xa9, 0x72, 0xea, 0xa5,
	0x36, 0x81, 0x03, 0xe2, 0x98, 0x20, 0xc4, 0x01, 0x0e, 0x51, 0x82, 0x40, 0xe2, 0x62, 0xad, 0x37,
	0x53, 0x77, 0x25, 0xef, 0x8e, 0xd9, 0xdd, 0x24, 0xb4, 0x5f, 0xd1, 0x5f, 0x41, 0xe2, 0x1f, 0xa8,
	0x38, 0x55, 0x9c, 0x38, 0x01, 0x4a, 0x7e, 0x04, 0x39, 0xbb, 0x36, 0x1c, 0x4b, 0x6f, 0xe3, 0x37,
	0xef, 0x3d, 0xcd, 0x9b, 0xf1, 0x92, 0x47, 0x0c, 0x72, 0xd0, 0x86, 0xd3, 0xf8, 0x94, 0xa7, 0x0a,
	0xe2, 0xc5, 0xc0, 0x16, 0x51, 0xa1, 0xd0, 0xa0, 0xdf, 0xa9, 0xda, 0x91, 0x45, 0x17, 0x83, 0xee,
	0x41, 0x86, 0x19, 0x6e, 0xba, 0x71, 0x59, 0x59, 0x62, 0x37, 0x64, 0xa8, 0x05, 0xea, 0x38, 0xa5,
	0xba, 0x34, 0x49, 0xc1, 0xd0, 0x41, 0xcc, 0x90, 0x4b, 0xd7, 0xef, 0x65, 0x88, 0x59, 0x0e, 0xf1,
	0xe6, 0x2b, 0x9d, 0x9f, 0xc6, 0x86, 0x0b, 0xd0, 0x86, 0x8a, 0xc2, 0x11, 0x0e, 0xad, 0x41, 0x62,
	0x9d, 0xed, 0x87, 0x6d, 0xf5, 0xbf, 0x79, 0x64, 0xff, 0xa5, 0x66, 0x0a, 0x97, 0x43, 0xc6, 0x70,
	0x2e, 0x8d, 0xff, 0x98, 0x34, 0x35, 0xcf, 0x24, 0xa8, 0xc0, 0x3b, 0xf2, 0x8e, 0x5b, 0xa3, 0xe0,
	0xfb, 0x97, 0x93, 0x03, 0xa7, 0x19, 0xce, 0x66, 0x0a, 0xb4, 0x9e, 0x1a, 0xc5, 0x65, 0x36, 0x71,
	0x3c, 0xff, 0x39, 0xd9, 0x49, 0x69, 0x4e, 0x25, 0x83, 0x60, 0xeb, 0xc8, 0x3b, 0x6e, 0x3f, 0x39,
	0x8c, 0x1c, 0xbf, 0x9c, 0x38, 0x72, 0x13, 0x47, 0x2f, 0x90, 0xcb, 0xd1, 0xf6, 0xd5, 0xcf, 0x5e,
	0x63, 0x52, 0xf1, 0xfd, 0x37, 0xa4, 0x43, 0x17, 0x94, 0xe7, 0x34, 0xcd, 0x21, 0xa9, 0x4c, 0xee,
	0xdc, 0xcc, 0xe4, 0x7e, 0xad, 0x1c, 0x59, 0x61, 0xff, 0xab, 0x47, 0x3a, 0x63, 0x90, 0x33, 0x2e,
	0xb3, 0xf7, 0xdc, 0x9c, 0xcd, 0x14, 0x5d, 0xd2, 0xfc, 0x16, 0x81, 0x9e, 0x91, 0x26, 0x15, 0xe5,
	0x32, 0x6e, 0x9a, 0xc7, 0xd1, 0xfd, 0x57, 0x64, 0x4f, 0xc1, 0xc7, 0x39, 0x68, 0x03, 0xb3, 0x84,
	0x1a, 0x97, 0xa4, 0x1b, 0xd9, 0x03, 0x45, 0xd5, 0x81, 0xa2, 0xb7, 0xd5, 0x81, 0x46, 0xbb, 0xa5,
	0xfe, 0xf2, 0x57, 0xcf, 0x9b, 0xb4, 0x6b, 0xe5, 0xd0, 0xf4, 0x3f, 0x6f, 0x91, 0x7b, 0x63, 0x7a,
	0x2e, 0x40, 0x9a, 0xb1, 0x42, 0xc1, 0x35, 0xdc, 0x22, 0xc6, 0x43, 0xd2, 0x92, 0x54, 0x80, 0x2e,
	0xa8, 0xbb, 0xcc, 0xde, 0xe4, 0x2f, 0xe0, 0x3f, 0x20, 0xad, 0x34, 0xc7, 0x34, 0xd1, 0xfc, 0xc2,
	0xae, 0x7c, 0x7f, 0xb2, 0x5b, 0x02, 0x53, 0x7e, 0x01, 0x7e, 0x48, 0x08, 0x43, 0x21, 0xb8, 0x29,
	0x27, 0x08, 0xb6, 0x37, 0xda, 0x7f, 0x10, 0xbf, 0x47, 0xda, 0x0a, 0x97, 0xc9, 0x02, 0x94, 0xe6,
	0x28, 0x83, 0xbb, 0x1b, 0x39, 0x51, 0xb8, 0x7c, 0x67, 0x11, 0x7f, 0x4a, 0x7c, 0xa6, 0x80, 0x1a,
	0x8e, 0x32, 0xa9, 0x7f, 0xc7, 0xa0, 0xf9, 0x1f, 0xfb, 0xe8, 0x54, 0xfa, 0xba, 0x59, 0x06, 0x2a,
	0xa3, 0x51, 0x33, 0x57, 0x10, 0xec, 0xd8, 0x40, 0x35, 0x30, 0x7a, 0x7d, 0xb5, 0x0a, 0xbd, 0xeb,
	0x55, 0xe8, 0xfd, 0x5e, 0x85, 0xde, 0xe5, 0x3a, 0x6c, 0x5c, 0xaf, 0xc3, 0xc6, 0x8f, 0x75, 0xd8,
	0xf8, 0x30, 0xc8, 0xb8, 0x39, 0x9b, 0xa7, 0x11, 0x43, 0x11, 0x57, 0x8f, 0x0e, 0x55, 0x56, 0xd7,
	0x27, 0xb4, 0x28, 0xe2, 0x4f, 0xee, 0x95, 0x9a, 0xf3, 0x02, 0x74, 0xda, 0xdc, 0xcc, 0xf6, 0xf4,
	0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x55, 0x0b, 0x90, 0x24, 0xc4, 0x03, 0x00, 0x00,
}

func (m *EscrowAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EscrowAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EscrowAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AvailableBalance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFibre(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFibre(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintFibre(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PendingWithdrawal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingWithdrawal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingWithdrawal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.RequestedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.RequestedAt):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintFibre(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFibre(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintFibre(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PaymentPromise) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentPromise) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentPromise) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintFibre(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x3a
	}
	n5, err5 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CreationTimestamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreationTimestamp):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintFibre(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x32
	if m.RowVersion != 0 {
		i = encodeVarintFibre(dAtA, i, uint64(m.RowVersion))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Commitment) > 0 {
		i -= len(m.Commitment)
		copy(dAtA[i:], m.Commitment)
		i = encodeVarintFibre(dAtA, i, uint64(len(m.Commitment)))
		i--
		dAtA[i] = 0x22
	}
	if m.BlobSize != 0 {
		i = encodeVarintFibre(dAtA, i, uint64(m.BlobSize))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintFibre(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintFibre(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFibre(dAtA []byte, offset int, v uint64) int {
	offset -= sovFibre(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EscrowAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovFibre(uint64(l))
	}
	l = m.Balance.Size()
	n += 1 + l + sovFibre(uint64(l))
	l = m.AvailableBalance.Size()
	n += 1 + l + sovFibre(uint64(l))
	return n
}

func (m *PendingWithdrawal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovFibre(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovFibre(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.RequestedAt)
	n += 1 + l + sovFibre(uint64(l))
	return n
}

func (m *PaymentPromise) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovFibre(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovFibre(uint64(l))
	}
	if m.BlobSize != 0 {
		n += 1 + sovFibre(uint64(m.BlobSize))
	}
	l = len(m.Commitment)
	if l > 0 {
		n += 1 + l + sovFibre(uint64(l))
	}
	if m.RowVersion != 0 {
		n += 1 + sovFibre(uint64(m.RowVersion))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreationTimestamp)
	n += 1 + l + sovFibre(uint64(l))
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovFibre(uint64(l))
	}
	return n
}

func sovFibre(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFibre(x uint64) (n int) {
	return sovFibre(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EscrowAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFibre
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EscrowAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EscrowAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFibre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFibre
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFibre
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFibre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFibre
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFibre
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFibre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFibre
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFibre
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AvailableBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFibre(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFibre
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingWithdrawal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFibre
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingWithdrawal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingWithdrawal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFibre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFibre
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFibre
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFibre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFibre
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFibre
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFibre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFibre
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFibre
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.RequestedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFibre(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFibre
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentPromise) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFibre
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentPromise: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentPromise: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFibre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFibre
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFibre
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFibre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFibre
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFibre
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = append(m.Namespace[:0], dAtA[iNdEx:postIndex]...)
			if m.Namespace == nil {
				m.Namespace = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlobSize", wireType)
			}
			m.BlobSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFibre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlobSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitment", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFibre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFibre
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFibre
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commitment = append(m.Commitment[:0], dAtA[iNdEx:postIndex]...)
			if m.Commitment == nil {
				m.Commitment = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowVersion", wireType)
			}
			m.RowVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFibre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFibre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFibre
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFibre
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CreationTimestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFibre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFibre
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFibre
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFibre(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFibre
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFibre(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFibre
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFibre
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFibre
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFibre
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFibre
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFibre
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFibre        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFibre          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFibre = fmt.Errorf("proto: unexpected end of group")
)
