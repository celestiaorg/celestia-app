// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: celestia/fibre/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgDepositToEscrow deposits funds to the signer's escrow account.
type MsgDepositToEscrow struct {
	// signer is the bech32 encoded signer address
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// amount is the amount to deposit
	Amount types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgDepositToEscrow) Reset()         { *m = MsgDepositToEscrow{} }
func (m *MsgDepositToEscrow) String() string { return proto.CompactTextString(m) }
func (*MsgDepositToEscrow) ProtoMessage()    {}
func (*MsgDepositToEscrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_48ffe62df34a71cd, []int{0}
}
func (m *MsgDepositToEscrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositToEscrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositToEscrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositToEscrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositToEscrow.Merge(m, src)
}
func (m *MsgDepositToEscrow) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositToEscrow) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositToEscrow.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositToEscrow proto.InternalMessageInfo

func (m *MsgDepositToEscrow) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgDepositToEscrow) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

// MsgDepositToEscrowResponse describes the response returned after depositing to escrow.
type MsgDepositToEscrowResponse struct {
}

func (m *MsgDepositToEscrowResponse) Reset()         { *m = MsgDepositToEscrowResponse{} }
func (m *MsgDepositToEscrowResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDepositToEscrowResponse) ProtoMessage()    {}
func (*MsgDepositToEscrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_48ffe62df34a71cd, []int{1}
}
func (m *MsgDepositToEscrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositToEscrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositToEscrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositToEscrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositToEscrowResponse.Merge(m, src)
}
func (m *MsgDepositToEscrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositToEscrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositToEscrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositToEscrowResponse proto.InternalMessageInfo

// MsgRequestWithdrawal requests withdrawal from the signer's escrow account.
type MsgRequestWithdrawal struct {
	// signer is the bech32 encoded signer address
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// amount is the amount to withdraw
	Amount types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgRequestWithdrawal) Reset()         { *m = MsgRequestWithdrawal{} }
func (m *MsgRequestWithdrawal) String() string { return proto.CompactTextString(m) }
func (*MsgRequestWithdrawal) ProtoMessage()    {}
func (*MsgRequestWithdrawal) Descriptor() ([]byte, []int) {
	return fileDescriptor_48ffe62df34a71cd, []int{2}
}
func (m *MsgRequestWithdrawal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestWithdrawal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestWithdrawal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestWithdrawal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestWithdrawal.Merge(m, src)
}
func (m *MsgRequestWithdrawal) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestWithdrawal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestWithdrawal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestWithdrawal proto.InternalMessageInfo

func (m *MsgRequestWithdrawal) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgRequestWithdrawal) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

// MsgRequestWithdrawalResponse describes the response returned after requesting withdrawal.
type MsgRequestWithdrawalResponse struct {
}

func (m *MsgRequestWithdrawalResponse) Reset()         { *m = MsgRequestWithdrawalResponse{} }
func (m *MsgRequestWithdrawalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRequestWithdrawalResponse) ProtoMessage()    {}
func (*MsgRequestWithdrawalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_48ffe62df34a71cd, []int{3}
}
func (m *MsgRequestWithdrawalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestWithdrawalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestWithdrawalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestWithdrawalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestWithdrawalResponse.Merge(m, src)
}
func (m *MsgRequestWithdrawalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestWithdrawalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestWithdrawalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestWithdrawalResponse proto.InternalMessageInfo

// MsgPayForFibre contains the original payment promise with validator signatures.
type MsgPayForFibre struct {
	// signer is the bech32 encoded address submitting this message
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// payment_promise is the original payment promise
	PaymentPromise PaymentPromise `protobuf:"bytes,2,opt,name=payment_promise,json=paymentPromise,proto3" json:"payment_promise"`
	// validator_signatures contains signatures from validators
	ValidatorSignatures [][]byte `protobuf:"bytes,3,rep,name=validator_signatures,json=validatorSignatures,proto3" json:"validator_signatures,omitempty"`
}

func (m *MsgPayForFibre) Reset()         { *m = MsgPayForFibre{} }
func (m *MsgPayForFibre) String() string { return proto.CompactTextString(m) }
func (*MsgPayForFibre) ProtoMessage()    {}
func (*MsgPayForFibre) Descriptor() ([]byte, []int) {
	return fileDescriptor_48ffe62df34a71cd, []int{4}
}
func (m *MsgPayForFibre) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPayForFibre) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPayForFibre.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPayForFibre) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPayForFibre.Merge(m, src)
}
func (m *MsgPayForFibre) XXX_Size() int {
	return m.Size()
}
func (m *MsgPayForFibre) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPayForFibre.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPayForFibre proto.InternalMessageInfo

func (m *MsgPayForFibre) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgPayForFibre) GetPaymentPromise() PaymentPromise {
	if m != nil {
		return m.PaymentPromise
	}
	return PaymentPromise{}
}

func (m *MsgPayForFibre) GetValidatorSignatures() [][]byte {
	if m != nil {
		return m.ValidatorSignatures
	}
	return nil
}

// MsgPayForFibreResponse describes the response returned after paying for fibre.
type MsgPayForFibreResponse struct {
}

func (m *MsgPayForFibreResponse) Reset()         { *m = MsgPayForFibreResponse{} }
func (m *MsgPayForFibreResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPayForFibreResponse) ProtoMessage()    {}
func (*MsgPayForFibreResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_48ffe62df34a71cd, []int{5}
}
func (m *MsgPayForFibreResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPayForFibreResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPayForFibreResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPayForFibreResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPayForFibreResponse.Merge(m, src)
}
func (m *MsgPayForFibreResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPayForFibreResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPayForFibreResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPayForFibreResponse proto.InternalMessageInfo

// MsgPaymentPromiseTimeout processes a payment promise after the timeout period.
type MsgPaymentPromiseTimeout struct {
	// signer is the bech32 encoded address submitting this message (can be anyone)
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// payment_promise is the original payment promise
	PaymentPromise PaymentPromise `protobuf:"bytes,2,opt,name=payment_promise,json=paymentPromise,proto3" json:"payment_promise"`
}

func (m *MsgPaymentPromiseTimeout) Reset()         { *m = MsgPaymentPromiseTimeout{} }
func (m *MsgPaymentPromiseTimeout) String() string { return proto.CompactTextString(m) }
func (*MsgPaymentPromiseTimeout) ProtoMessage()    {}
func (*MsgPaymentPromiseTimeout) Descriptor() ([]byte, []int) {
	return fileDescriptor_48ffe62df34a71cd, []int{6}
}
func (m *MsgPaymentPromiseTimeout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPaymentPromiseTimeout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPaymentPromiseTimeout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPaymentPromiseTimeout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPaymentPromiseTimeout.Merge(m, src)
}
func (m *MsgPaymentPromiseTimeout) XXX_Size() int {
	return m.Size()
}
func (m *MsgPaymentPromiseTimeout) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPaymentPromiseTimeout.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPaymentPromiseTimeout proto.InternalMessageInfo

func (m *MsgPaymentPromiseTimeout) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgPaymentPromiseTimeout) GetPaymentPromise() PaymentPromise {
	if m != nil {
		return m.PaymentPromise
	}
	return PaymentPromise{}
}

// MsgPaymentPromiseTimeoutResponse describes the response returned after
// processing a payment promise timeout.
type MsgPaymentPromiseTimeoutResponse struct {
}

func (m *MsgPaymentPromiseTimeoutResponse) Reset()         { *m = MsgPaymentPromiseTimeoutResponse{} }
func (m *MsgPaymentPromiseTimeoutResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPaymentPromiseTimeoutResponse) ProtoMessage()    {}
func (*MsgPaymentPromiseTimeoutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_48ffe62df34a71cd, []int{7}
}
func (m *MsgPaymentPromiseTimeoutResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPaymentPromiseTimeoutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPaymentPromiseTimeoutResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPaymentPromiseTimeoutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPaymentPromiseTimeoutResponse.Merge(m, src)
}
func (m *MsgPaymentPromiseTimeoutResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPaymentPromiseTimeoutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPaymentPromiseTimeoutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPaymentPromiseTimeoutResponse proto.InternalMessageInfo

// MsgUpdateFibreParams defines the sdk.Msg type to update the fibre parameters.
type MsgUpdateFibreParams struct {
	// authority is the address of the governance account.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the fibre parameters to update.
	//
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateFibreParams) Reset()         { *m = MsgUpdateFibreParams{} }
func (m *MsgUpdateFibreParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateFibreParams) ProtoMessage()    {}
func (*MsgUpdateFibreParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_48ffe62df34a71cd, []int{8}
}
func (m *MsgUpdateFibreParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateFibreParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateFibreParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateFibreParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateFibreParams.Merge(m, src)
}
func (m *MsgUpdateFibreParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateFibreParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateFibreParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateFibreParams proto.InternalMessageInfo

func (m *MsgUpdateFibreParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateFibreParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateFibreParamsResponse defines the MsgUpdateFibreParams response type.
type MsgUpdateFibreParamsResponse struct {
}

func (m *MsgUpdateFibreParamsResponse) Reset()         { *m = MsgUpdateFibreParamsResponse{} }
func (m *MsgUpdateFibreParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateFibreParamsResponse) ProtoMessage()    {}
func (*MsgUpdateFibreParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_48ffe62df34a71cd, []int{9}
}
func (m *MsgUpdateFibreParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateFibreParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateFibreParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateFibreParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateFibreParamsResponse.Merge(m, src)
}
func (m *MsgUpdateFibreParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateFibreParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateFibreParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateFibreParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgDepositToEscrow)(nil), "celestia.fibre.v1.MsgDepositToEscrow")
	proto.RegisterType((*MsgDepositToEscrowResponse)(nil), "celestia.fibre.v1.MsgDepositToEscrowResponse")
	proto.RegisterType((*MsgRequestWithdrawal)(nil), "celestia.fibre.v1.MsgRequestWithdrawal")
	proto.RegisterType((*MsgRequestWithdrawalResponse)(nil), "celestia.fibre.v1.MsgRequestWithdrawalResponse")
	proto.RegisterType((*MsgPayForFibre)(nil), "celestia.fibre.v1.MsgPayForFibre")
	proto.RegisterType((*MsgPayForFibreResponse)(nil), "celestia.fibre.v1.MsgPayForFibreResponse")
	proto.RegisterType((*MsgPaymentPromiseTimeout)(nil), "celestia.fibre.v1.MsgPaymentPromiseTimeout")
	proto.RegisterType((*MsgPaymentPromiseTimeoutResponse)(nil), "celestia.fibre.v1.MsgPaymentPromiseTimeoutResponse")
	proto.RegisterType((*MsgUpdateFibreParams)(nil), "celestia.fibre.v1.MsgUpdateFibreParams")
	proto.RegisterType((*MsgUpdateFibreParamsResponse)(nil), "celestia.fibre.v1.MsgUpdateFibreParamsResponse")
}

func init() { proto.RegisterFile("celestia/fibre/v1/tx.proto", fileDescriptor_48ffe62df34a71cd) }

var fileDescriptor_48ffe62df34a71cd = []byte{
	// 729 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x95, 0xcf, 0x4f, 0x13, 0x41,
	0x14, 0xc7, 0x3b, 0x20, 0x24, 0x0c, 0x06, 0xc2, 0x5a, 0xa5, 0xac, 0x75, 0x6d, 0x9b, 0x08, 0x88,
	0xee, 0xae, 0x85, 0x44, 0x13, 0x6e, 0xa2, 0x72, 0x31, 0x4d, 0x9a, 0x82, 0x31, 0xf1, 0x42, 0xa6,
	0xed, 0xb0, 0x4c, 0xd2, 0xdd, 0x59, 0x67, 0xa6, 0x40, 0x4f, 0x1a, 0xce, 0x46, 0x4d, 0x4c, 0xf4,
	0x4f, 0xf0, 0xe0, 0x85, 0x83, 0x7f, 0x04, 0x47, 0xfc, 0x71, 0xf0, 0x64, 0x0c, 0x98, 0xf0, 0x6f,
	0x98, 0xd9, 0x99, 0x6e, 0x5b, 0xb7, 0x0d, 0xe8, 0x45, 0x6f, 0xd3, 0xf9, 0x7e, 0xe7, 0xbd, 0xcf,
	0xeb, 0xbc, 0xb7, 0x03, 0xcd, 0x1a, 0x6e, 0x60, 0x2e, 0x08, 0x72, 0x37, 0x49, 0x95, 0x61, 0x77,
	0xbb, 0xe8, 0x8a, 0x5d, 0x27, 0x64, 0x54, 0x50, 0x63, 0xaa, 0xad, 0x39, 0x91, 0xe6, 0x6c, 0x17,
	0x4d, 0x2b, 0x69, 0x0f, 0x11, 0x43, 0x3e, 0x57, 0x47, 0xcc, 0x2b, 0x49, 0x5d, 0x9d, 0x55, 0x72,
	0xda, 0xa3, 0x1e, 0x8d, 0x96, 0xae, 0x5c, 0xe9, 0xdd, 0xac, 0x47, 0xa9, 0xd7, 0xc0, 0x2e, 0x0a,
	0x89, 0x8b, 0x82, 0x80, 0x0a, 0x24, 0x08, 0x0d, 0xda, 0x21, 0xa7, 0x6b, 0x94, 0xfb, 0x94, 0xbb,
	0x3e, 0xf7, 0x64, 0x38, 0x9f, 0x7b, 0x5a, 0x98, 0x51, 0xc2, 0x86, 0x8a, 0xa7, 0x7e, 0x68, 0xc9,
	0xd2, 0x67, 0xaa, 0x88, 0x4b, 0x86, 0x2a, 0x16, 0xa8, 0xe8, 0xd6, 0x28, 0x09, 0x94, 0x5e, 0x78,
	0x01, 0xa0, 0x51, 0xe2, 0xde, 0x7d, 0x1c, 0x52, 0x4e, 0xc4, 0x3a, 0x7d, 0xc0, 0x6b, 0x8c, 0xee,
	0x18, 0xb7, 0xe0, 0x28, 0x27, 0x5e, 0x80, 0x59, 0x06, 0xe4, 0xc0, 0xfc, 0xd8, 0x4a, 0xe6, 0xf3,
	0x47, 0x3b, 0xad, 0x03, 0xdf, 0xad, 0xd7, 0x19, 0xe6, 0x7c, 0x4d, 0x30, 0x12, 0x78, 0x15, 0xed,
	0x33, 0xee, 0xc0, 0x51, 0xe4, 0xd3, 0x66, 0x20, 0x32, 0x43, 0x39, 0x30, 0x3f, 0xbe, 0x38, 0xe3,
	0x68, 0xbb, 0xcc, 0xec, 0xe8, 0xcc, 0xce, 0x3d, 0x4a, 0x82, 0x95, 0x73, 0x07, 0xdf, 0xaf, 0xa6,
	0x2a, 0xda, 0xbe, 0x3c, 0xbe, 0x77, 0xb2, 0xbf, 0xa0, 0xa3, 0x14, 0xb2, 0xd0, 0x4c, 0xd2, 0x54,
	0x30, 0x0f, 0x69, 0xc0, 0x71, 0xe1, 0x25, 0x80, 0xe9, 0x12, 0xf7, 0x2a, 0xf8, 0x69, 0x13, 0x73,
	0xf1, 0x98, 0x88, 0xad, 0x3a, 0x43, 0x3b, 0xa8, 0xf1, 0xcf, 0x70, 0x2d, 0x98, 0xed, 0xc7, 0x13,
	0x03, 0x7f, 0x05, 0x70, 0xa2, 0xc4, 0xbd, 0x32, 0x6a, 0xad, 0x52, 0xb6, 0x2a, 0xaf, 0xff, 0x2f,
	0x50, 0xcb, 0x70, 0x32, 0x44, 0x2d, 0x1f, 0x07, 0x42, 0x5e, 0xb0, 0x4f, 0x38, 0xd6, 0xcc, 0x79,
	0x27, 0xd1, 0x96, 0x4e, 0x59, 0x39, 0xcb, 0xca, 0xa8, 0xd9, 0x27, 0xc2, 0x9e, 0x5d, 0xa3, 0x08,
	0xd3, 0xdb, 0xa8, 0x41, 0xea, 0x48, 0x50, 0xb6, 0x21, 0xb3, 0x20, 0xd1, 0x64, 0x98, 0x67, 0x86,
	0x73, 0xc3, 0xf3, 0xe7, 0x2b, 0x17, 0x62, 0x6d, 0x2d, 0x96, 0x7a, 0xcb, 0xce, 0xc0, 0x4b, 0xbd,
	0x55, 0xc5, 0x05, 0x7f, 0x00, 0x30, 0xa3, 0xa4, 0xae, 0x7c, 0xeb, 0xc4, 0xc7, 0xb4, 0x29, 0xfe,
	0x87, 0xd2, 0x7b, 0xeb, 0x28, 0xc0, 0xdc, 0x20, 0xd8, 0xb8, 0xa2, 0x77, 0xaa, 0xe7, 0x1e, 0x85,
	0x75, 0x24, 0x70, 0x54, 0x6c, 0x39, 0x1a, 0x73, 0xe3, 0x36, 0x1c, 0x43, 0x4d, 0xb1, 0x45, 0x19,
	0x11, 0xad, 0x53, 0x0b, 0xea, 0x58, 0x65, 0xe7, 0xa9, 0x0f, 0x45, 0xa7, 0xf3, 0xfa, 0x94, 0x22,
	0x0d, 0xed, 0xce, 0x53, 0xf6, 0xe5, 0x09, 0x89, 0xde, 0x09, 0xa4, 0x9b, 0x2f, 0x01, 0xd6, 0x26,
	0x5f, 0xfc, 0x34, 0x02, 0x87, 0x4b, 0xdc, 0x33, 0x5e, 0x01, 0x38, 0xf9, 0xfb, 0x7c, 0x5f, 0xeb,
	0x93, 0x34, 0x39, 0x78, 0xa6, 0x7d, 0x26, 0x5b, 0xfc, 0x5f, 0xcd, 0xee, 0x7d, 0xf9, 0xf9, 0x66,
	0x28, 0xb7, 0x0c, 0x16, 0x0a, 0x97, 0x3b, 0x9f, 0xbd, 0xba, 0x72, 0xdb, 0x82, 0xda, 0x58, 0x65,
	0x7f, 0x0b, 0xe0, 0x54, 0x72, 0x88, 0xe7, 0xfa, 0x27, 0x4b, 0x18, 0x4d, 0xf7, 0x8c, 0xc6, 0x98,
	0x6b, 0x2e, 0xe2, 0xca, 0x4b, 0xae, 0x6c, 0x87, 0x8b, 0x29, 0xbf, 0xbd, 0xd3, 0x41, 0x78, 0x06,
	0xc7, 0xbb, 0x67, 0x35, 0xdf, 0x3f, 0x51, 0x97, 0xc5, 0xbc, 0x7e, 0xaa, 0x25, 0xa6, 0x28, 0x44,
	0x14, 0x59, 0x49, 0x31, 0xdd, 0xfd, 0x68, 0xb4, 0xec, 0x4d, 0xca, 0xec, 0x68, 0xc3, 0x78, 0x0f,
	0xe0, 0xc5, 0xfe, 0xc3, 0x73, 0x63, 0x60, 0xa2, 0xa4, 0xd9, 0x5c, 0xfa, 0x03, 0x73, 0xcc, 0x77,
	0x33, 0xe2, 0x9b, 0x95, 0x7c, 0xf9, 0x1e, 0x3e, 0x79, 0xc6, 0xd6, 0xf3, 0x67, 0x0b, 0xcd, 0xe3,
	0xc3, 0xa9, 0xe4, 0x4c, 0x0c, 0xb8, 0xc2, 0x84, 0x71, 0xd0, 0x15, 0x0e, 0x6c, 0x66, 0x73, 0xe4,
	0xf9, 0xc9, 0xfe, 0x02, 0x58, 0x79, 0x78, 0x70, 0x64, 0x81, 0xc3, 0x23, 0x0b, 0xfc, 0x38, 0xb2,
	0xc0, 0xeb, 0x63, 0x2b, 0x75, 0x78, 0x6c, 0xa5, 0xbe, 0x1d, 0x5b, 0xa9, 0x27, 0x45, 0x8f, 0x88,
	0xad, 0x66, 0xd5, 0xa9, 0x51, 0xdf, 0x6d, 0xc7, 0xa6, 0xcc, 0x8b, 0xd7, 0x36, 0x0a, 0x43, 0x77,
	0x57, 0xd7, 0x25, 0x5a, 0x21, 0xe6, 0xd5, 0xd1, 0xe8, 0x09, 0x5c, 0xfa, 0x15, 0x00, 0x00, 0xff,
	0xff, 0x7b, 0x05, 0x24, 0xfb, 0xfa, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// DepositToEscrow deposits funds to the signer's escrow account
	DepositToEscrow(ctx context.Context, in *MsgDepositToEscrow, opts ...grpc.CallOption) (*MsgDepositToEscrowResponse, error)
	// RequestWithdrawal requests withdrawal from the signer's escrow account
	RequestWithdrawal(ctx context.Context, in *MsgRequestWithdrawal, opts ...grpc.CallOption) (*MsgRequestWithdrawalResponse, error)
	// PayForFibre contains the original payment promise with validator signatures
	PayForFibre(ctx context.Context, in *MsgPayForFibre, opts ...grpc.CallOption) (*MsgPayForFibreResponse, error)
	// PaymentPromiseTimeout processes a payment promise after the timeout period
	PaymentPromiseTimeout(ctx context.Context, in *MsgPaymentPromiseTimeout, opts ...grpc.CallOption) (*MsgPaymentPromiseTimeoutResponse, error)
	// UpdateFibreParams defines a rpc handler method for MsgUpdateFibreParams.
	UpdateFibreParams(ctx context.Context, in *MsgUpdateFibreParams, opts ...grpc.CallOption) (*MsgUpdateFibreParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) DepositToEscrow(ctx context.Context, in *MsgDepositToEscrow, opts ...grpc.CallOption) (*MsgDepositToEscrowResponse, error) {
	out := new(MsgDepositToEscrowResponse)
	err := c.cc.Invoke(ctx, "/celestia.fibre.v1.Msg/DepositToEscrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequestWithdrawal(ctx context.Context, in *MsgRequestWithdrawal, opts ...grpc.CallOption) (*MsgRequestWithdrawalResponse, error) {
	out := new(MsgRequestWithdrawalResponse)
	err := c.cc.Invoke(ctx, "/celestia.fibre.v1.Msg/RequestWithdrawal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PayForFibre(ctx context.Context, in *MsgPayForFibre, opts ...grpc.CallOption) (*MsgPayForFibreResponse, error) {
	out := new(MsgPayForFibreResponse)
	err := c.cc.Invoke(ctx, "/celestia.fibre.v1.Msg/PayForFibre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PaymentPromiseTimeout(ctx context.Context, in *MsgPaymentPromiseTimeout, opts ...grpc.CallOption) (*MsgPaymentPromiseTimeoutResponse, error) {
	out := new(MsgPaymentPromiseTimeoutResponse)
	err := c.cc.Invoke(ctx, "/celestia.fibre.v1.Msg/PaymentPromiseTimeout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateFibreParams(ctx context.Context, in *MsgUpdateFibreParams, opts ...grpc.CallOption) (*MsgUpdateFibreParamsResponse, error) {
	out := new(MsgUpdateFibreParamsResponse)
	err := c.cc.Invoke(ctx, "/celestia.fibre.v1.Msg/UpdateFibreParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// DepositToEscrow deposits funds to the signer's escrow account
	DepositToEscrow(context.Context, *MsgDepositToEscrow) (*MsgDepositToEscrowResponse, error)
	// RequestWithdrawal requests withdrawal from the signer's escrow account
	RequestWithdrawal(context.Context, *MsgRequestWithdrawal) (*MsgRequestWithdrawalResponse, error)
	// PayForFibre contains the original payment promise with validator signatures
	PayForFibre(context.Context, *MsgPayForFibre) (*MsgPayForFibreResponse, error)
	// PaymentPromiseTimeout processes a payment promise after the timeout period
	PaymentPromiseTimeout(context.Context, *MsgPaymentPromiseTimeout) (*MsgPaymentPromiseTimeoutResponse, error)
	// UpdateFibreParams defines a rpc handler method for MsgUpdateFibreParams.
	UpdateFibreParams(context.Context, *MsgUpdateFibreParams) (*MsgUpdateFibreParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) DepositToEscrow(ctx context.Context, req *MsgDepositToEscrow) (*MsgDepositToEscrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositToEscrow not implemented")
}
func (*UnimplementedMsgServer) RequestWithdrawal(ctx context.Context, req *MsgRequestWithdrawal) (*MsgRequestWithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestWithdrawal not implemented")
}
func (*UnimplementedMsgServer) PayForFibre(ctx context.Context, req *MsgPayForFibre) (*MsgPayForFibreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayForFibre not implemented")
}
func (*UnimplementedMsgServer) PaymentPromiseTimeout(ctx context.Context, req *MsgPaymentPromiseTimeout) (*MsgPaymentPromiseTimeoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentPromiseTimeout not implemented")
}
func (*UnimplementedMsgServer) UpdateFibreParams(ctx context.Context, req *MsgUpdateFibreParams) (*MsgUpdateFibreParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFibreParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_DepositToEscrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDepositToEscrow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DepositToEscrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celestia.fibre.v1.Msg/DepositToEscrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DepositToEscrow(ctx, req.(*MsgDepositToEscrow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequestWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestWithdrawal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celestia.fibre.v1.Msg/RequestWithdrawal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestWithdrawal(ctx, req.(*MsgRequestWithdrawal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PayForFibre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPayForFibre)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PayForFibre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celestia.fibre.v1.Msg/PayForFibre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PayForFibre(ctx, req.(*MsgPayForFibre))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PaymentPromiseTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPaymentPromiseTimeout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PaymentPromiseTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celestia.fibre.v1.Msg/PaymentPromiseTimeout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PaymentPromiseTimeout(ctx, req.(*MsgPaymentPromiseTimeout))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateFibreParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateFibreParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateFibreParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celestia.fibre.v1.Msg/UpdateFibreParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateFibreParams(ctx, req.(*MsgUpdateFibreParams))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "celestia.fibre.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DepositToEscrow",
			Handler:    _Msg_DepositToEscrow_Handler,
		},
		{
			MethodName: "RequestWithdrawal",
			Handler:    _Msg_RequestWithdrawal_Handler,
		},
		{
			MethodName: "PayForFibre",
			Handler:    _Msg_PayForFibre_Handler,
		},
		{
			MethodName: "PaymentPromiseTimeout",
			Handler:    _Msg_PaymentPromiseTimeout_Handler,
		},
		{
			MethodName: "UpdateFibreParams",
			Handler:    _Msg_UpdateFibreParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "celestia/fibre/v1/tx.proto",
}

func (m *MsgDepositToEscrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositToEscrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositToEscrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDepositToEscrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositToEscrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositToEscrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRequestWithdrawal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestWithdrawal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestWithdrawal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRequestWithdrawalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestWithdrawalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestWithdrawalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPayForFibre) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPayForFibre) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPayForFibre) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorSignatures) > 0 {
		for iNdEx := len(m.ValidatorSignatures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ValidatorSignatures[iNdEx])
			copy(dAtA[i:], m.ValidatorSignatures[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorSignatures[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.PaymentPromise.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPayForFibreResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPayForFibreResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPayForFibreResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPaymentPromiseTimeout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPaymentPromiseTimeout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPaymentPromiseTimeout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PaymentPromise.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPaymentPromiseTimeoutResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPaymentPromiseTimeoutResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPaymentPromiseTimeoutResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateFibreParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateFibreParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateFibreParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateFibreParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateFibreParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateFibreParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgDepositToEscrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgDepositToEscrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRequestWithdrawal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgRequestWithdrawalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPayForFibre) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.PaymentPromise.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.ValidatorSignatures) > 0 {
		for _, b := range m.ValidatorSignatures {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgPayForFibreResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPaymentPromiseTimeout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.PaymentPromise.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgPaymentPromiseTimeoutResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateFibreParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateFibreParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgDepositToEscrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositToEscrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositToEscrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositToEscrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositToEscrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositToEscrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestWithdrawal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestWithdrawal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestWithdrawal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestWithdrawalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestWithdrawalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestWithdrawalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPayForFibre) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPayForFibre: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPayForFibre: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentPromise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PaymentPromise.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSignatures", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorSignatures = append(m.ValidatorSignatures, make([]byte, postIndex-iNdEx))
			copy(m.ValidatorSignatures[len(m.ValidatorSignatures)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPayForFibreResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPayForFibreResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPayForFibreResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPaymentPromiseTimeout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPaymentPromiseTimeout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPaymentPromiseTimeout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentPromise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PaymentPromise.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPaymentPromiseTimeoutResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPaymentPromiseTimeoutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPaymentPromiseTimeoutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateFibreParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateFibreParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateFibreParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateFibreParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateFibreParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateFibreParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
