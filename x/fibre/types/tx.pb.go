// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: celestia/fibre/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgSetFibreProviderInfo allows a validator to set their fibre provider information
type MsgSetFibreProviderInfo struct {
	// validator_address is the operator address of the validator
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	// ip_address is the IP address for the fibre service (max 45 characters for IPv6)
	IpAddress string `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (m *MsgSetFibreProviderInfo) Reset()         { *m = MsgSetFibreProviderInfo{} }
func (m *MsgSetFibreProviderInfo) String() string { return proto.CompactTextString(m) }
func (*MsgSetFibreProviderInfo) ProtoMessage()    {}
func (*MsgSetFibreProviderInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_48ffe62df34a71cd, []int{0}
}
func (m *MsgSetFibreProviderInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetFibreProviderInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetFibreProviderInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetFibreProviderInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetFibreProviderInfo.Merge(m, src)
}
func (m *MsgSetFibreProviderInfo) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetFibreProviderInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetFibreProviderInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetFibreProviderInfo proto.InternalMessageInfo

// MsgSetFibreProviderInfoResponse defines the Msg/SetFibreProviderInfo response type
type MsgSetFibreProviderInfoResponse struct {
}

func (m *MsgSetFibreProviderInfoResponse) Reset()         { *m = MsgSetFibreProviderInfoResponse{} }
func (m *MsgSetFibreProviderInfoResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetFibreProviderInfoResponse) ProtoMessage()    {}
func (*MsgSetFibreProviderInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_48ffe62df34a71cd, []int{1}
}
func (m *MsgSetFibreProviderInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetFibreProviderInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetFibreProviderInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetFibreProviderInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetFibreProviderInfoResponse.Merge(m, src)
}
func (m *MsgSetFibreProviderInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetFibreProviderInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetFibreProviderInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetFibreProviderInfoResponse proto.InternalMessageInfo

// MsgRemoveFibreProviderInfo allows removal of fibre provider information for inactive validators
type MsgRemoveFibreProviderInfo struct {
	// validator_address is the operator address of the validator to remove
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	// remover_address is the address of the account requesting removal
	RemoverAddress string `protobuf:"bytes,2,opt,name=remover_address,json=removerAddress,proto3" json:"remover_address,omitempty"`
}

func (m *MsgRemoveFibreProviderInfo) Reset()         { *m = MsgRemoveFibreProviderInfo{} }
func (m *MsgRemoveFibreProviderInfo) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveFibreProviderInfo) ProtoMessage()    {}
func (*MsgRemoveFibreProviderInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_48ffe62df34a71cd, []int{2}
}
func (m *MsgRemoveFibreProviderInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveFibreProviderInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveFibreProviderInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveFibreProviderInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveFibreProviderInfo.Merge(m, src)
}
func (m *MsgRemoveFibreProviderInfo) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveFibreProviderInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveFibreProviderInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveFibreProviderInfo proto.InternalMessageInfo

// MsgRemoveFibreProviderInfoResponse defines the Msg/RemoveFibreProviderInfo response type
type MsgRemoveFibreProviderInfoResponse struct {
}

func (m *MsgRemoveFibreProviderInfoResponse) Reset()         { *m = MsgRemoveFibreProviderInfoResponse{} }
func (m *MsgRemoveFibreProviderInfoResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveFibreProviderInfoResponse) ProtoMessage()    {}
func (*MsgRemoveFibreProviderInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_48ffe62df34a71cd, []int{3}
}
func (m *MsgRemoveFibreProviderInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveFibreProviderInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveFibreProviderInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveFibreProviderInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveFibreProviderInfoResponse.Merge(m, src)
}
func (m *MsgRemoveFibreProviderInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveFibreProviderInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveFibreProviderInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveFibreProviderInfoResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgSetFibreProviderInfo)(nil), "celestia.fibre.v1.MsgSetFibreProviderInfo")
	proto.RegisterType((*MsgSetFibreProviderInfoResponse)(nil), "celestia.fibre.v1.MsgSetFibreProviderInfoResponse")
	proto.RegisterType((*MsgRemoveFibreProviderInfo)(nil), "celestia.fibre.v1.MsgRemoveFibreProviderInfo")
	proto.RegisterType((*MsgRemoveFibreProviderInfoResponse)(nil), "celestia.fibre.v1.MsgRemoveFibreProviderInfoResponse")
}

func init() { proto.RegisterFile("celestia/fibre/v1/tx.proto", fileDescriptor_48ffe62df34a71cd) }

var fileDescriptor_48ffe62df34a71cd = []byte{
	// 368 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4a, 0x4e, 0xcd, 0x49,
	0x2d, 0x2e, 0xc9, 0x4c, 0xd4, 0x4f, 0xcb, 0x4c, 0x2a, 0x4a, 0xd5, 0x2f, 0x33, 0xd4, 0x2f, 0xa9,
	0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x84, 0xc9, 0xe9, 0x81, 0xe5, 0xf4, 0xca, 0x0c,
	0xa5, 0x44, 0xd2, 0xf3, 0xd3, 0xf3, 0xc1, 0xb2, 0xfa, 0x20, 0x16, 0x44, 0xa1, 0x94, 0x78, 0x72,
	0x7e, 0x71, 0x6e, 0x7e, 0xb1, 0x7e, 0x6e, 0x71, 0x3a, 0xc8, 0x80, 0xdc, 0xe2, 0x74, 0x88, 0x84,
	0x52, 0x2b, 0x23, 0x97, 0xb8, 0x6f, 0x71, 0x7a, 0x70, 0x6a, 0x89, 0x1b, 0xc8, 0x84, 0x80, 0xa2,
	0xfc, 0xb2, 0xcc, 0x94, 0xd4, 0x22, 0xcf, 0xbc, 0xb4, 0x7c, 0x21, 0x6d, 0x2e, 0xc1, 0xb2, 0xc4,
	0x9c, 0xcc, 0x94, 0xc4, 0x92, 0xfc, 0xa2, 0xf8, 0xc4, 0x94, 0x94, 0xa2, 0xd4, 0xe2, 0x62, 0x09,
	0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x01, 0xb8, 0x84, 0x23, 0x44, 0x5c, 0x48, 0x96, 0x8b, 0x2b,
	0xb3, 0x00, 0xae, 0x8a, 0x09, 0xac, 0x8a, 0x33, 0xb3, 0x00, 0x2a, 0x6d, 0x25, 0xd7, 0xb1, 0x40,
	0x9e, 0xe1, 0xc5, 0x02, 0x79, 0x86, 0xa6, 0xe7, 0x1b, 0xb4, 0x30, 0x8d, 0x55, 0x52, 0xe4, 0x92,
	0xc7, 0xe1, 0x8c, 0xa0, 0xd4, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0xa5, 0x09, 0x8c, 0x5c, 0x52,
	0xbe, 0xc5, 0xe9, 0x41, 0xa9, 0xb9, 0xf9, 0x65, 0xa9, 0x14, 0xba, 0x56, 0x9d, 0x8b, 0xbf, 0x08,
	0x6c, 0x4e, 0x11, 0x9a, 0x93, 0xf9, 0xa0, 0xc2, 0x30, 0x77, 0xcb, 0x20, 0xbb, 0x1b, 0x5d, 0x8f,
	0x92, 0x0a, 0x97, 0x12, 0x6e, 0x17, 0xc1, 0x1c, 0x6e, 0xd4, 0xca, 0xc4, 0xc5, 0xec, 0x5b, 0x9c,
	0x2e, 0x54, 0xc6, 0x25, 0x82, 0x35, 0x9c, 0xb5, 0xf4, 0x30, 0xa2, 0x51, 0x0f, 0x47, 0x60, 0x48,
	0x19, 0x11, 0xaf, 0x16, 0x66, 0xbf, 0x50, 0x3d, 0x97, 0x38, 0xae, 0x40, 0xd3, 0xc5, 0x6e, 0x1c,
	0x0e, 0xe5, 0x52, 0xa6, 0x24, 0x29, 0x87, 0x39, 0x40, 0x8a, 0xb5, 0xe1, 0xf9, 0x06, 0x2d, 0x46,
	0x27, 0xef, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2,
	0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0x32, 0x4c, 0xcf, 0x2c,
	0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x87, 0xd9, 0x90, 0x5f, 0x94, 0x0e, 0x67, 0xeb,
	0x26, 0x16, 0x14, 0xe8, 0x57, 0x40, 0x33, 0x40, 0x49, 0x65, 0x41, 0x6a, 0x71, 0x12, 0x1b, 0x38,
	0xfd, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x9a, 0xe4, 0xa0, 0x1f, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// SetFibreProviderInfo defines a method for setting fibre provider information
	SetFibreProviderInfo(ctx context.Context, in *MsgSetFibreProviderInfo, opts ...grpc.CallOption) (*MsgSetFibreProviderInfoResponse, error)
	// RemoveFibreProviderInfo defines a method for removing fibre provider information
	RemoveFibreProviderInfo(ctx context.Context, in *MsgRemoveFibreProviderInfo, opts ...grpc.CallOption) (*MsgRemoveFibreProviderInfoResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SetFibreProviderInfo(ctx context.Context, in *MsgSetFibreProviderInfo, opts ...grpc.CallOption) (*MsgSetFibreProviderInfoResponse, error) {
	out := new(MsgSetFibreProviderInfoResponse)
	err := c.cc.Invoke(ctx, "/celestia.fibre.v1.Msg/SetFibreProviderInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveFibreProviderInfo(ctx context.Context, in *MsgRemoveFibreProviderInfo, opts ...grpc.CallOption) (*MsgRemoveFibreProviderInfoResponse, error) {
	out := new(MsgRemoveFibreProviderInfoResponse)
	err := c.cc.Invoke(ctx, "/celestia.fibre.v1.Msg/RemoveFibreProviderInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// SetFibreProviderInfo defines a method for setting fibre provider information
	SetFibreProviderInfo(context.Context, *MsgSetFibreProviderInfo) (*MsgSetFibreProviderInfoResponse, error)
	// RemoveFibreProviderInfo defines a method for removing fibre provider information
	RemoveFibreProviderInfo(context.Context, *MsgRemoveFibreProviderInfo) (*MsgRemoveFibreProviderInfoResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SetFibreProviderInfo(ctx context.Context, req *MsgSetFibreProviderInfo) (*MsgSetFibreProviderInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFibreProviderInfo not implemented")
}
func (*UnimplementedMsgServer) RemoveFibreProviderInfo(ctx context.Context, req *MsgRemoveFibreProviderInfo) (*MsgRemoveFibreProviderInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFibreProviderInfo not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SetFibreProviderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetFibreProviderInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetFibreProviderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celestia.fibre.v1.Msg/SetFibreProviderInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetFibreProviderInfo(ctx, req.(*MsgSetFibreProviderInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveFibreProviderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveFibreProviderInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveFibreProviderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celestia.fibre.v1.Msg/RemoveFibreProviderInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveFibreProviderInfo(ctx, req.(*MsgRemoveFibreProviderInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "celestia.fibre.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetFibreProviderInfo",
			Handler:    _Msg_SetFibreProviderInfo_Handler,
		},
		{
			MethodName: "RemoveFibreProviderInfo",
			Handler:    _Msg_RemoveFibreProviderInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "celestia/fibre/v1/tx.proto",
}

func (m *MsgSetFibreProviderInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetFibreProviderInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetFibreProviderInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IpAddress) > 0 {
		i -= len(m.IpAddress)
		copy(dAtA[i:], m.IpAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IpAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetFibreProviderInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetFibreProviderInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetFibreProviderInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveFibreProviderInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveFibreProviderInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveFibreProviderInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RemoverAddress) > 0 {
		i -= len(m.RemoverAddress)
		copy(dAtA[i:], m.RemoverAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RemoverAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveFibreProviderInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveFibreProviderInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveFibreProviderInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSetFibreProviderInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.IpAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetFibreProviderInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveFibreProviderInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RemoverAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveFibreProviderInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSetFibreProviderInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetFibreProviderInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetFibreProviderInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetFibreProviderInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetFibreProviderInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetFibreProviderInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveFibreProviderInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveFibreProviderInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveFibreProviderInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoverAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoverAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveFibreProviderInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveFibreProviderInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveFibreProviderInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
